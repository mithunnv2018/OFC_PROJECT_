"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/searchfreelancersdetails/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var SearchFreeLancersDetailsComponent = (function () {
    function SearchFreeLancersDetailsComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.msgs = [];
        this.drpvar = [];
        this.drpsearchfreelancersdetails = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.member_id = '';
        this.listofcertificates = [];
        this.listofemployments = [];
        this.listofexperiences = [];
        this.mybaseurl = baseUrlservice.getBaseurl();
    }
    SearchFreeLancersDetailsComponent.prototype.clear = function () {
        this.newsearchfreelancersdetails = true;
        this.freelancermember = {
            "ofcmembers_id": "",
            "ofcmembers_fname": "",
            "ofcmembers_mname": "",
            "ofcmembers_lname": "",
            "ofcmembers_name": "",
            "ofcmember_type": "",
            "city_id": "",
            "ofcmembers_emailid": "",
            "ofcmembers_password": "",
            "ofcmembers_address1": "",
            "ofcmembers_address2": "",
            "ofcmembers_pincode": "",
            "ofcmembers_contactnos": "",
            "ofcmembers_availability": "",
            "ofcmembers_displayname": "",
            "ofcmembers_description": "",
            "ofcmembers_selfrating": "",
            "ofcmembers_experiencelevel": "",
            "ofcmembers_gender": "",
            "ofcmembers_dob": "",
            "ofcmembers_nosofteammembers": "",
            "status": "",
            "country_id": "",
            "country_name": "",
            "state_id": "",
            "state_name": "",
            "city_name": "",
            "skillsarr": []
        };
        this.fileupload = {
            fileName: '',
            fileType: '',
            filePath: '',
            fileStatus: '',
            uploadfile_filename: ''
        };
    };
    SearchFreeLancersDetailsComponent.prototype.onRowSelect = function (event) {
        this.newsearchfreelancersdetails = false;
    };
    SearchFreeLancersDetailsComponent.prototype.aftercalldate = function () {
    };
    SearchFreeLancersDetailsComponent.prototype.onFinalFileUpload = function () {
        for (var i = 0; i < this.uploadedFiles.length; i++) {
            var filename = this.uploadedFiles[i].name;
            this.fileupload.fileName = filename;
            this.fileupload.filePath = '';
            this.fileupload.fileStatus = 'Yes';
            this.fileupload.fileType = 'img';
            this.fileupload.uploadfile_filename = '';
            this.fileuploadarr.push(this.fileupload);
        }
    };
    SearchFreeLancersDetailsComponent.prototype.onSubmit = function () {
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Please wait', detail: 'Form Submitted Successfully.. Please wait..' });
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
    };
    SearchFreeLancersDetailsComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    SearchFreeLancersDetailsComponent.prototype.onBeforeUpload = function (event) {
        event.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;multipart/form-data;');
        console.log("mith here:");
    };
    SearchFreeLancersDetailsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        var data = sessionStorage.getItem('memberdetails');
        console.log('onsessionStorage : ' + JSON.parse(data));
        var ofcmemsession = JSON.parse(data);
        var ofcmemsession_id = ofcmemsession.ofcmemsession_id;
        console.log('ofcmemsession_id : ' + ofcmemsession_id);
        this.route.params.forEach(function (params) {
            _this.member_id = params["freelancerid"];
        });
        this.localService
            .getedit(ofcmemsession_id, this.member_id)
            .subscribe(function (p) { return _this.freelancermember = p[0]; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
        this.localService
            .getCertificateList(this.member_id)
            .subscribe(function (p) { return _this.listofcertificates = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
        this.localService
            .getEmploymentList(this.member_id)
            .subscribe(function (p) { return _this.listofemployments = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
        this.localService
            .getExperienceList(this.member_id)
            .subscribe(function (p) { return _this.listofexperiences = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    SearchFreeLancersDetailsComponent.prototype.processdata = function () {
    };
    SearchFreeLancersDetailsComponent.prototype.getSkillList = function (skillList) {
        var a = "";
        for (var i = 0; i < skillList.length; i++) {
            var c = skillList[i].skill_name;
            var b = '<div class="skills">' + c + '</div>';
            a += b;
        }
        return a;
    };
    SearchFreeLancersDetailsComponent.prototype.populatedrp = function () {
        for (var i = 0; i < this.drpvar.length; i++) {
            this.drpsearchfreelancersdetails.push({ label: this.drpvar[i].labeld, value: this.drpvar[i].valued });
        }
    };
    SearchFreeLancersDetailsComponent.prototype.drpchange = function (events1) {
    };
    Object.defineProperty(SearchFreeLancersDetailsComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    SearchFreeLancersDetailsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-searchfreelancersdetails',
            templateUrl: 'searchfreelancersdetails.component.html',
            styleUrls: ['searchfreelancersdetails.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.SearchFreeLancersDetailsService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService])
    ], SearchFreeLancersDetailsComponent);
    return SearchFreeLancersDetailsComponent;
}());
exports.SearchFreeLancersDetailsComponent = SearchFreeLancersDetailsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
