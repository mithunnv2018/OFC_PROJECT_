"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/workallocation/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var validator_directive_1 = require('../shared/validators/validator.directive');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var WorkallocationComponent = (function () {
    function WorkallocationComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.msgs = [];
        this.workallocations = [];
        this.drpvar = [];
        this.drpworkallocation = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.mybaseurl = baseUrlservice.getBaseurl();
    }
    WorkallocationComponent.prototype.clear = function () {
        this.newworkallocation = true;
        this.workallocation = {
            status: 'active',
            comp_id: '',
            member_id: '',
            workallocation_id: '1',
            workallocation_name: '',
            workallocation_budget: '',
            workallocation_enddate: '',
            workallocation_remarks: '',
            workallocation_manhours: '',
            Workallocation_timeframe: '',
            workallocation_completed: 'No',
            workallocation_startdate: '',
            workallocation_commission: '',
            workallocation_description: '',
            workallocation_requireddaystocomplete: '',
        };
        this.fileupload = {
            fileName: '',
            fileType: '',
            filePath: '',
            fileStatus: '',
            uploadfile_filename: ''
        };
    };
    WorkallocationComponent.prototype.onRowSelect = function (event) {
        this.newworkallocation = false;
        var tempproj;
        tempproj = this.selectedRow;
    };
    WorkallocationComponent.prototype.aftercalldate = function () {
    };
    WorkallocationComponent.prototype.onFinalFileUpload = function () {
        for (var i = 0; i < this.uploadedFiles.length; i++) {
            var filename = this.uploadedFiles[i].name;
            this.fileupload.fileName = filename;
            this.fileupload.filePath = '';
            this.fileupload.fileStatus = 'Yes';
            this.fileupload.fileType = 'img';
            this.fileupload.uploadfile_filename = '';
            this.fileuploadarr.push(this.fileupload);
        }
    };
    WorkallocationComponent.prototype.onSubmit = function () {
        var _this = this;
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        console.log(JSON.stringify(this.workallocation));
        this.msgs.push({ severity: 'info', summary: 'Please wait', detail: 'Form Submitted Successfully.. Please wait..' });
        if (this.newworkallocation) {
            this.localService
                .insert(this.workallocation, this.fileuploadarr)
                .subscribe(function (p) { return _this.workallocations = p; }, function (e) { return console.log(e); }, function () { return _this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' }); });
        }
        else {
            console.log('workallocation: ' + JSON.stringify(this.workallocation) + ' , f:' + JSON.stringify(this.fileuploadarr));
            this.localService
                .update(this.workallocation, this.fileuploadarr)
                .subscribe(function (p) { return _this.workallocations = p; }, function (e) { return console.log(e); }, function () { return _this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' }); });
        }
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
    };
    WorkallocationComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    WorkallocationComponent.prototype.onBeforeUpload = function (event) {
        event.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;multipart/form-data;');
        console.log("mith here:");
    };
    WorkallocationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        this.userform = this.fb.group({
            'name': new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, validator_directive_1.CustomValidator.isEmailValid])),
            'budget': new forms_1.FormControl('', forms_1.Validators.required),
            'remarks': new forms_1.FormControl('', forms_1.Validators.required),
            'manhours': new forms_1.FormControl('', forms_1.Validators.required),
            'startdatev': new forms_1.FormControl('', forms_1.Validators.required),
            'enddatev': new forms_1.FormControl('', forms_1.Validators.required),
            'timeframe': new forms_1.FormControl('', forms_1.Validators.required),
            'completed': new forms_1.FormControl('', forms_1.Validators.required),
            'commission': new forms_1.FormControl('', forms_1.Validators.required),
            'description': new forms_1.FormControl('', forms_1.Validators.required),
            'daysrequired': new forms_1.FormControl('', forms_1.Validators.required),
        });
        this.localService
            .getall()
            .subscribe(function (p) { return _this.workallocations = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    WorkallocationComponent.prototype.processdata = function () {
    };
    WorkallocationComponent.prototype.populatedrp = function () {
        for (var i = 0; i < this.drpvar.length; i++) {
            this.drpworkallocation.push({ label: this.drpvar[i].labeld, value: this.drpvar[i].valued });
        }
    };
    WorkallocationComponent.prototype.drpchange = function (events1) {
    };
    Object.defineProperty(WorkallocationComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    WorkallocationComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-workallocation',
            templateUrl: 'workallocation.component.html',
            styleUrls: ['workallocation.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.WorkallocationService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService])
    ], WorkallocationComponent);
    return WorkallocationComponent;
}());
exports.WorkallocationComponent = WorkallocationComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
