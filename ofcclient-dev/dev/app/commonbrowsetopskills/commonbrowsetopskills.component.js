"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/commonbrowsetopskills/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var CommonBrowseTopSkillsComponent = (function () {
    function CommonBrowseTopSkillsComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.msgs = [];
        this.skills = [];
        this.drpvar = [];
        this.drpskill = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.mybaseurl = baseUrlservice.getBaseurl();
    }
    CommonBrowseTopSkillsComponent.prototype.clear = function () {
        this.newskill = true;
        this.skill = {
            skill_id: '',
            skill_name: '',
            skill_alias: '',
            subcat_id: '',
            createdate: '',
            modifieddate: '',
            status: ''
        };
        this.fileupload = {
            fileName: '',
            fileType: '',
            filePath: '',
            fileStatus: '',
            uploadfile_filename: ''
        };
    };
    CommonBrowseTopSkillsComponent.prototype.onRowSelect = function (event) {
        this.newskill = false;
        var tempproj;
        tempproj = this.selectedRow;
    };
    CommonBrowseTopSkillsComponent.prototype.aftercalldate = function () {
    };
    CommonBrowseTopSkillsComponent.prototype.onFinalFileUpload = function () {
        for (var i = 0; i < this.uploadedFiles.length; i++) {
            var filename = this.uploadedFiles[i].name;
            this.fileupload.fileName = filename;
            this.fileupload.filePath = '';
            this.fileupload.fileStatus = 'Yes';
            this.fileupload.fileType = 'img';
            this.fileupload.uploadfile_filename = '';
            this.fileuploadarr.push(this.fileupload);
        }
    };
    CommonBrowseTopSkillsComponent.prototype.onSubmit = function () {
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        console.log(JSON.stringify(this.skill));
        this.msgs.push({ severity: 'info', summary: 'Please wait', detail: 'Form Submitted Successfully.. Please wait..' });
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
    };
    CommonBrowseTopSkillsComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    CommonBrowseTopSkillsComponent.prototype.onBeforeUpload = function (event) {
        event.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;multipart/form-data;');
        console.log("mith here:");
    };
    CommonBrowseTopSkillsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        this.localService
            .getall()
            .subscribe(function (p) { return _this.skills = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    CommonBrowseTopSkillsComponent.prototype.processdata = function () {
    };
    CommonBrowseTopSkillsComponent.prototype.populatedrp = function () {
        for (var i = 0; i < this.drpvar.length; i++) {
            this.drpskill.push({ label: this.drpvar[i].labeld, value: this.drpvar[i].valued });
        }
    };
    CommonBrowseTopSkillsComponent.prototype.drpchange = function (events1) {
    };
    Object.defineProperty(CommonBrowseTopSkillsComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    CommonBrowseTopSkillsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-commonbrowsetopskills',
            templateUrl: 'commonbrowsetopskills.component.html',
            styleUrls: ['commonbrowsetopskills.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.CommonBrowseTopSkillsService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService])
    ], CommonBrowseTopSkillsComponent);
    return CommonBrowseTopSkillsComponent;
}());
exports.CommonBrowseTopSkillsComponent = CommonBrowseTopSkillsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
