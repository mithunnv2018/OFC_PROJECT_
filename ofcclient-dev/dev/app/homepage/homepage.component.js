"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/homepage/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var HomePageComponent = (function () {
    function HomePageComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.msgs = [];
        this.homepages = [];
        this.drpvar = [];
        this.drphomepage = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.temppopularsearch = [];
        this.testimonial = [];
        this.plan = [];
        this.popularsearchhomepage = [];
        this.popularserviceshomepage = [];
        this.mybaseurl = baseUrlservice.getBaseurl();
        this.mybaseurlpopularserviceimages = baseUrlservice.getBaseurlfiledownloadepath();
    }
    HomePageComponent.prototype.clear = function () {
        this.newhomepage = true;
        this.homepage = {
            status: 'active',
            comp_id: '',
            member_id: '',
            homepage_id: '1',
            homepage_name: '',
            homepage_budget: '',
            homepage_enddate: '',
            homepage_remarks: '',
            homepage_manhours: '',
            HomePage_timeframe: '',
            homepage_completed: 'No',
            homepage_startdate: '',
            homepage_commission: '',
            homepage_description: '',
            homepage_requireddaystocomplete: '',
        };
        this.fileupload = {
            fileName: '',
            fileType: '',
            filePath: '',
            fileStatus: '',
            uploadfile_filename: ''
        };
    };
    HomePageComponent.prototype.onRowSelect = function (event) {
        this.newhomepage = false;
        var tempproj;
        tempproj = this.selectedRow;
    };
    HomePageComponent.prototype.aftercalldate = function () {
        this.startdate = new Date(Number(this.homepage.homepage_startdate));
        this.enddate = new Date(Number(this.homepage.homepage_enddate));
    };
    HomePageComponent.prototype.onFinalFileUpload = function () {
        for (var i = 0; i < this.uploadedFiles.length; i++) {
            var filename = this.uploadedFiles[i].name;
            this.fileupload.fileName = filename;
            this.fileupload.filePath = '';
            this.fileupload.fileStatus = 'Yes';
            this.fileupload.fileType = 'img';
            this.fileupload.uploadfile_filename = '';
            this.fileuploadarr.push(this.fileupload);
        }
    };
    HomePageComponent.prototype.onSubmit = function () {
        this.homepage.homepage_startdate = this.mydate1.parse(this.startdate);
        this.homepage.homepage_enddate = this.mydate1.parse(this.enddate);
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        console.log(JSON.stringify(this.homepage));
        this.msgs.push({ severity: 'info', summary: 'Please wait', detail: 'Form Submitted Successfully.. Please wait..' });
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
    };
    HomePageComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    HomePageComponent.prototype.onBeforeUpload = function (event) {
        event.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;multipart/form-data;');
        console.log("mith here:");
    };
    HomePageComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        var pop1 = {
            popularsearchname: 'Company Search',
            popularsearchurl: 'resources/ofc/images/popular-searches-01.png',
        };
        var pop2 = {
            popularsearchname: 'Trademarks & Patent',
            popularsearchurl: 'resources/ofc/images/popular-searches-02.png',
        };
        var pop3 = {
            popularsearchname: 'Telemarketing',
            popularsearchurl: 'resources/ofc/images/popular-searches-03.png',
        };
        var pop4 = {
            popularsearchname: 'Article Writing',
            popularsearchurl: 'resources/ofc/images/popular-searches-04.png',
        };
        var pop5 = {
            popularsearchname: 'Factory',
            popularsearchurl: 'resources/ofc/images/popular-searches-05.png',
        };
        var pop6 = {
            popularsearchname: 'Promotional Videos',
            popularsearchurl: 'resources/ofc/images/popular-searches-06.png',
        };
        this.localService
            .getPopularServicesFileUpload()
            .subscribe(function (p) { return _this.popularserviceshomepage = p; }, function (e) { return console.log(e); }, function () {
        });
        this.localService
            .getPopularSearch()
            .subscribe(function (p) { return _this.popularsearchhomepage = p; }, function (e) { return console.log(e); }, function () { });
        this.localService
            .getTestimonial()
            .subscribe(function (p) { return _this.testimonial = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
        this.localService
            .getPriceNLevel()
            .subscribe(function (p) { return _this.plan = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    HomePageComponent.prototype.processdata = function () {
    };
    HomePageComponent.prototype.populatedrp = function () {
        for (var i = 0; i < this.drpvar.length; i++) {
            this.drphomepage.push({ label: this.drpvar[i].labeld, value: this.drpvar[i].valued });
        }
    };
    HomePageComponent.prototype.drpchange = function (events1) {
    };
    Object.defineProperty(HomePageComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    HomePageComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-homepage',
            templateUrl: 'homepage.component.html',
            styleUrls: ['homepage.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.HomePageService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService])
    ], HomePageComponent);
    return HomePageComponent;
}());
exports.HomePageComponent = HomePageComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
