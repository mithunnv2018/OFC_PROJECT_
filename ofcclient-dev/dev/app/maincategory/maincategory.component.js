"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/maincategory/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var MaincategoryComponent = (function () {
    function MaincategoryComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.msgs = [];
        this.maincategorys = [];
        this.drpvar = [];
        this.drpmaincategory = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.mybaseurl = baseUrlservice.getBaseurl() + "maincategory/";
    }
    MaincategoryComponent.prototype.clear = function () {
        this.newmaincategory = true;
        this.maincategory = { maincat_id: '', maincat_name: '', maincat_aliasname: '' };
    };
    MaincategoryComponent.prototype.onRowSelect = function (event) {
        var _this = this;
        this.newmaincategory = false;
        var tempcat;
        tempcat = this.selectedRow;
        this.localService
            .getedit(tempcat.maincat_id)
            .subscribe(function (p) { return _this.maincategory = p; }, function (e) { return console.log(e); }, function () { _this.aftercalldate(); });
    };
    MaincategoryComponent.prototype.aftercalldate = function () {
    };
    MaincategoryComponent.prototype.onFinalFileUpload = function () {
    };
    MaincategoryComponent.prototype.onSubmit = function () {
        var _this = this;
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        console.log(JSON.stringify(this.maincategory));
        this.msgs.push({ severity: 'info', summary: 'Please wait', detail: 'Form Submitted Successfully.. Please wait..' });
        if (this.newmaincategory) {
            this.localService
                .insert(this.maincategory)
                .subscribe(function (p) { return _this.maincategorys = p; }, function (e) { return console.log(e); }, function () { return _this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' }); });
        }
        else {
            console.log('maincategory: ' + JSON.stringify(this.maincategory) + ' , f:' + JSON.stringify(this.fileuploadarr));
            this.localService
                .update(this.maincategory)
                .subscribe(function (p) { return _this.maincategorys = p; }, function (e) { return console.log(e); }, function () { return _this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' }); });
        }
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
        this.clear();
    };
    MaincategoryComponent.prototype.onUpload = function (event) {
    };
    MaincategoryComponent.prototype.onBeforeUpload = function (event) {
    };
    MaincategoryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        this.userform = this.fb.group({
            'maincat_aliasname': new forms_1.FormControl('', null),
            'maincat_name': new forms_1.FormControl('', forms_1.Validators.required) });
        this.localService
            .getall()
            .subscribe(function (p) { return _this.maincategorys = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    MaincategoryComponent.prototype.processdata = function () {
    };
    MaincategoryComponent.prototype.populatedrp = function () {
    };
    MaincategoryComponent.prototype.drpchange = function (events1) {
    };
    Object.defineProperty(MaincategoryComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    MaincategoryComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-maincategory',
            templateUrl: 'maincategory.component.html',
            styleUrls: ['maincategory.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.MainCategoryService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService])
    ], MaincategoryComponent);
    return MaincategoryComponent;
}());
exports.MaincategoryComponent = MaincategoryComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tYWluY2F0ZWdvcnkvbWFpbmNhdGVnb3J5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQWlDLGVBQWUsQ0FBQyxDQUFBO0FBQ2pELHNCQUEyRCxnQkFBZ0IsQ0FBQyxDQUFBO0FBSTVFLHVCQUF1QyxpQkFBaUIsQ0FBQyxDQUFBO0FBU3pELDJCQUErQiw0QkFBNEIsQ0FBQyxDQUFBO0FBQzVELHNCQUFtQyw4QkFBOEIsQ0FBQyxDQUFBO0FBSWxFLGtDQUE2QixtQ0FBbUMsQ0FBQyxDQUFBO0FBQ2pFLG1DQUE4QixvQ0FBb0MsQ0FBQyxDQUFBO0FBRW5FLGdDQUE2QixtQ0FBbUMsQ0FBQyxDQUFBO0FBV2pFO0lBa0RFLCtCQUFvQixFQUFlLEVBQ2YsS0FBcUIsRUFDckIsTUFBYyxFQUNkLFlBQWlDLEVBQ2pDLEtBQXFCLEVBQ3JCLE9BQXFCLEVBQ3JCLFFBQXVCLEVBQ3ZCLGNBQTZCO1FBUDdCLE9BQUUsR0FBRixFQUFFLENBQWE7UUFDZixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBZTtRQUN2QixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQXJEakQsU0FBSSxHQUFZLEVBQUUsQ0FBQztRQUduQixrQkFBYSxHQUFpQixFQUFFLENBQUM7UUFNaEMsV0FBTSxHQUFjLEVBQUUsQ0FBQztRQUN2QixvQkFBZSxHQUFlLEVBQUUsQ0FBQztRQVdsQyxrQkFBYSxHQUFVLEVBQUUsQ0FBQztRQUUxQixrQkFBYSxHQUFlLEVBQUUsQ0FBQztRQWdDdEIsSUFBSSxDQUFDLFNBQVMsR0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLEdBQUMsZUFBZSxDQUFDO0lBVXBFLENBQUM7SUFwQ0QscUNB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QVk7SUFFdEIsQ0FBQztJQUdELHNCQUFJLDZDQUFVO2FBQWQsY0FBbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBN1BsRTtRQUFDLGdCQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixXQUFXLEVBQUUsNkJBQTZCO1lBQzFDLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO1lBQ3pDLFNBQVMsRUFBQyxDQUFDLDJCQUFjLEVBQUMsZ0NBQVksRUFBQyxrQ0FBYSxFQUFDLGdDQUFjLENBQUM7U0FDckUsQ0FBQzs7NkJBQUE7SUF5UEQsNEJBQUM7QUFBRCxDQXhQRCxBQXdQRSxJQUFBO0FBeFBXLDZCQUFxQix3QkF3UGhDLENBQUEiLCJmaWxlIjoiYXBwL21haW5jYXRlZ29yeS9tYWluY2F0ZWdvcnkuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Zvcm1Hcm91cCxGb3JtQ29udHJvbCxWYWxpZGF0b3JzLEZvcm1CdWlsZGVyfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7Rm9ybXNNb2R1bGUsUmVhY3RpdmVGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge01lc3NhZ2VzTW9kdWxlLE1lc3NhZ2UsR3Jvd2x9IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcbmltcG9ydCB7UGFuZWxNb2R1bGV9IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge0J1dHRvbk1vZHVsZX0gZnJvbSAncHJpbWVuZy9wcmltZW5nJztcclxuaW1wb3J0IHtNYWluQ2F0ZWdvcnl9IGZyb20gJy4vbWFpbmNhdCc7XHJcbmltcG9ydCB7RHJvcGRvd24xfSBmcm9tICcuL2Ryb3Bkb3duMSc7XHJcbmltcG9ydCB7RmlsZVVwbG9hZH0gZnJvbSAnLi9maWxldXBsb2FkJztcclxuaW1wb3J0IHtEYXRhVGFibGVNb2R1bGV9IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcbmltcG9ydCB7RHJvcGRvd25Nb2R1bGV9IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcblxyXG5cclxuaW1wb3J0IHsgTXlDdXJyZW5jeVBpcGUgfSBmcm9tICcuLi9zaGFyZWQvcGlwZXMvZmlyc3QucGlwZSc7XHJcbmltcG9ydCB7IE1haW5DYXRlZ29yeVNlcnZpY2V9IGZyb20gJy4uL3NoYXJlZC9tYWluY2F0ZWdvcnkvaW5kZXgnO1xyXG5cclxuaW1wb3J0IHtGaWxlVXBsb2FkTW9kdWxlfSBmcm9tICdwcmltZW5nL3ByaW1lbmcnO1xyXG5pbXBvcnQge1NlbGVjdEl0ZW19IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcbmltcG9ydCB7IE15RGF0ZUZvcm1hdCB9IGZyb20gJy4uL3NoYXJlZC9waXBlcy9teWRhdGVmb3JtYXQucGlwZSc7XHJcbmltcG9ydCB7IEVtYWlsVmFsaWRhdGUgfSBmcm9tICcuLi9zaGFyZWQvcGlwZXMvZW1haWx2YWxpZGF0ZS5waXBlJztcclxuaW1wb3J0IHsgQ3VzdG9tVmFsaWRhdG9yIH0gZnJvbSAnLi4vc2hhcmVkL3ZhbGlkYXRvcnMvdmFsaWRhdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7QmFzZVVybFNlcnZpY2V9IGZyb20gJy4uL3NoYXJlZC9iYXNldXJsL2Jhc2V1cmwuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIGxhenkgbG9hZGVkIG1haW5jYXRlZ29yeUNvbXBvbmVudC5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgc2VsZWN0b3I6ICdzZC1tYWluY2F0ZWdvcnknLFxyXG4gIHRlbXBsYXRlVXJsOiAnbWFpbmNhdGVnb3J5LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnbWFpbmNhdGVnb3J5LmNvbXBvbmVudC5jc3MnXSxcclxuICBwcm92aWRlcnM6W015Q3VycmVuY3lQaXBlLE15RGF0ZUZvcm1hdCxFbWFpbFZhbGlkYXRlLEJhc2VVcmxTZXJ2aWNlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWFpbmNhdGVnb3J5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAvL0Zvcm0gZ3JvcCBcclxuICB1c2VyZm9ybTogRm9ybUdyb3VwO1xyXG4gIC8vIEdyb3dsIG1lc3NlZ2VcclxuICBtc2dzOiBNZXNzYWdlW109W107XHJcblxyXG4gIC8vRGVjbGFyZTogRGF0YSBoYW5kbGluZyBmb3IgR3JpZCBmbG93LCBmb3JtIGZsb3dcclxuICBtYWluY2F0ZWdvcnlzOiBNYWluQ2F0ZWdvcnlbXT1bXTtcclxuICBzdWJtaXR0ZWQ6IGJvb2xlYW47XHJcbiAgbWFpbmNhdGVnb3J5OiBNYWluQ2F0ZWdvcnk7XHJcbiAgc2VsZWN0ZWRSb3c6IE1haW5DYXRlZ29yeTtcclxuXHJcbiAgIC8vIEZvcm0gZGF0YSBwcmVmaWxsZWRcclxuICAgZHJwdmFyOiBEcm9wZG93bjFbXT1bXTtcclxuICAgZHJwbWFpbmNhdGVnb3J5OiBTZWxlY3RJdGVtW109W107XHJcbiAgIHN0YXJ0ZGF0ZTogRGF0ZTtcclxuICAgZW5kZGF0ZTogRGF0ZTtcclxuXHJcbiAgIC8vYm9vbGVhbiB2YWx1ZSBmb3IgQWRkIG5ldyBvciBFZGl0IE1vZGVcclxuICAgbmV3bWFpbmNhdGVnb3J5OiBib29sZWFuO1xyXG4gICBcclxuICAvLyAgc2VsZWN0ZWRtYWluY2F0ZWdvcnk6IHN0cmluZztcclxuICAgICAgIFxyXG4gIC8vKioqIGZpbGV1cGxvYWQgRGVjbGFyZSAqKipcclxuICAvL0NsaWVudCBmb3JtYXQgZm9yIGZpbGUgdXBsb2FkXHJcbiAgdXBsb2FkZWRGaWxlczogYW55W10gPSBbXTtcclxuICAvL3NlcnZlciBmb3JtYXQgZm9yIGZpbGUgdXBsb2FkXHJcbiAgZmlsZXVwbG9hZGFycjogRmlsZVVwbG9hZFtdPVtdO1xyXG4gIGZpbGV1cGxvYWQ6IEZpbGVVcGxvYWQ7XHJcblxyXG4gIG15YmFzZXVybDpzdHJpbmc7XHJcblxyXG4gIC8vUHJlcGFyZSBkYXRhIGZvciBuZXcgZW50cnkgb3IgaW5pdGl6ZSBkYXRhIGR1cmluZyBmb3JtIGxvYWQgYnkgY2xlYXJpbmcgZGF0YSBvciBwcmVzZXR0aW5nIGRhdGFcclxuICBjbGVhcigpe1xyXG4gICAgICAgIHRoaXMubmV3bWFpbmNhdGVnb3J5PXRydWU7XHJcbiAgICAgICAgdGhpcy5tYWluY2F0ZWdvcnk9e21haW5jYXRfaWQ6JycsbWFpbmNhdF9uYW1lOicnLG1haW5jYXRfYWxpYXNuYW1lOicnfTtcclxuXHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgICAgXHJcbiAgICAvLyB0aGlzLmZpbGV1cGxvYWQ9e1xyXG4gICAgLy8gICBmaWxlTmFtZTogJycsXHJcbiAgICAvLyAgIGZpbGVUeXBlOiAnJyxcclxuICAgIC8vICAgZmlsZVBhdGg6ICcnLFxyXG4gICAgLy8gICBmaWxlU3RhdHVzOiAnJyxcclxuICAgIC8vICAgdXBsb2FkZmlsZV9maWxlbmFtZTogJydcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIC8vIGNvbnN0cnVjdG9yIGluaXRpYXplIG9mIGFsbCBuZWNlc3NhcnkgdmFyaWFibGUgYW5kIG9iamVjdHNcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZiOiBGb3JtQnVpbGRlcixcclxuICAgICAgICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgbG9jYWxTZXJ2aWNlOiBNYWluQ2F0ZWdvcnlTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgbXljdXI6IE15Q3VycmVuY3lQaXBlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgbXlkYXRlMTogTXlEYXRlRm9ybWF0LFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgZW1haWx2YWw6IEVtYWlsVmFsaWRhdGUsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiYXNlVXJsc2VydmljZTpCYXNlVXJsU2VydmljZVxyXG4gICAgICAgICAgICAgICl7XHJcbiAgICAgICAgICAgdGhpcy5teWJhc2V1cmw9YmFzZVVybHNlcnZpY2UuZ2V0QmFzZXVybCgpK1wibWFpbmNhdGVnb3J5L1wiOyAgICAgXHJcbiAgICAgICAgICAvLyBkcnBvcCBkb3duIGNhbiBvbmx5IGJlIHBvcHVsYXRlZCBpbiBjb25zdHJ1Y3RvciBhbmQgbm90IGluIG5naW5pdCgpXHJcbiAgICAgICAgICAvLyB0aGlzLmxvY2FsU2VydmljZVxyXG4gICAgICAgICAgLy8gLmdldHNlbGVjdGRycG1haW5jYXRlZ29yeSgnaGonKVxyXG4gICAgICAgICAgLy8gLnN1YnNjcmliZShcclxuICAgICAgICAgIC8vICAgLyogaGFwcHkgcGF0aCAqLyBwID0+dGhpcy5kcnB2YXI9cCwvL2FsZXJ0KCBKU09OLnN0cmluZ2lmeSggcCkpLFxyXG4gICAgICAgICAgLy8gICAvKiBlcnJvciBwYXRoICovIGUgPT4gY29uc29sZS5sb2coZSksXHJcbiAgICAgICAgICAvLyAgIC8qIG9uQ29tcGxldGUgKi8gKCkgPT4gdGhpcy5wb3B1bGF0ZWRycCgpKTsvL3t0aGlzLm15bWV0aG9kKHRoaXMuZHJwdmFyKTt9KTsvL3RoaXMubXNncy5wdXNoKHtzZXZlcml0eTonaW5mbycsIHN1bW1hcnk6J1N1Y2Nlc3MnLCBkZXRhaWw6J0Zvcm0gVXBkYXRlIFN1Y2Nlc3NmdWxseTogJyArIEpTT04uc3RyaW5naWZ5KCB0aGlzLmRycHZhcikgKyAnIDogJyArIHRoaXMuZHJwdmFyLmxlbmd0aH0pKTtcclxuXHJcbiAgICBcclxuICB9XHJcbiAgb25Sb3dTZWxlY3QoZXZlbnQ6IGFueSl7XHJcbiAgICAgICAgIC8vSW5kaWNhdG9yIGZvciBmb3JtIGlzIGluIEVkaXQgbW9kZVxyXG4gICAgICAgICB0aGlzLm5ld21haW5jYXRlZ29yeT1mYWxzZTtcclxuICAgICAgICAgLy9Db3B5IG9mIHJvdyBzZWxlY3RlZFxyXG4gICAgICAgIC8vICB0aGlzLm1haW5jYXRlZ29yeT10aGlzLnNlbGVjdGVkUm93O1xyXG4gICAgICAgICBsZXQgdGVtcGNhdDpNYWluQ2F0ZWdvcnkgO1xyXG4gICAgICAgICB0ZW1wY2F0ID0gdGhpcy5zZWxlY3RlZFJvdztcclxuICAgICAgICAgLy9DYWxsaW5nIFdTIHRvIGdldCB0aGUgc2VsZWN0ZWQgZGF0YSBmcm9tIHNlcnZlciBEQiBvZiB0aGUgc2VsZWN0ZWQgcm93XHJcbiAgICAgIC8vICAgIHRoaXMubG9jYWxTZXJ2aWNlXHJcbiAgICAgIC8vIC5nZXRzZWxlY3RBbGxmaWxlTWFpbmNhdGVnb3J5KHRlbXBwcm9qLm1haW5jYXRlZ29yeV9pZClcclxuICAgICAgLy8gLnN1YnNjcmliZShcclxuICAgICAgLy8gICAgLyogaGFwcHkgcGF0aCAqLyBwID0+IHRoaXMuZmlsZXVwbG9hZGFycj1wLFxyXG4gICAgICAvLyAgICAvKiBlcnJvciBwYXRoICovIGUgPT4gY29uc29sZS5sb2coIGUpLFxyXG4gICAgICAvLyAgICAvKiBvbkNvbXBsZXRlICovICgpID0+IGNvbnNvbGUubG9nKCdkb25lIGdldHNlbGVjdEFsbGZpbGV1cGxvYWRtYWluY2F0ZWdvcnk6ICcgKyB0aGlzLmZpbGV1cGxvYWRhcnIpKTtcclxuXHJcbiAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdvblJvd1NlbGVjdDogJyArIEpTT04uc3RyaW5naWZ5ICh0aGlzLm1haW5jYXRlZ29yeSkpO1xyXG4gICAgICAgIC8vICBjb25zb2xlLmxvZygnb25Sb3dTZWxlY3QgZmlsZXVwbG9hZGFycjogJyArIEpTT04uc3RyaW5naWZ5ICh0aGlzLmZpbGV1cGxvYWRhcnIpKTtcclxuXHJcbiAgICAgICAgIC8vQ2FsbGluZyBXUyB0byBnZXQgdGhlIHNlbGVjdGVkIGRhdGEgZnJvbSBzZXJ2ZXIgREIgb2YgdGhlIHNlbGVjdGVkIHJvd1xyXG4gICAgICAgIHRoaXMubG9jYWxTZXJ2aWNlXHJcbiAgICAgIC5nZXRlZGl0KHRlbXBjYXQubWFpbmNhdF9pZClcclxuICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgLyogaGFwcHkgcGF0aCAqLyBwID0+IHRoaXMubWFpbmNhdGVnb3J5PXAsXHJcbiAgICAgICAgIC8qIGVycm9yIHBhdGggKi8gZSA9PiBjb25zb2xlLmxvZyggZSksXHJcbiAgICAgICAgIC8qIG9uQ29tcGxldGUgKi8gKCkgPT4ge3RoaXMuYWZ0ZXJjYWxsZGF0ZSgpO30gKTsvL2NvbnNvbGUubG9nKCdkb25lIGdldHNlbGVjdEVkaXRtYWluY2F0ZWdvcnk6ICcgKyB0aGlzLm1haW5jYXRlZ29yeSkpO1xyXG5cclxuICAgICAgICAgXHJcbiAgICAgICAgIFxyXG4gIH1cclxuICBhZnRlcmNhbGxkYXRlKCl7XHJcbiAgICAvLyAgYWxlcnQoSlNPTi5zdHJpbmdpZnkoIHRoaXMubWFpbmNhdGVnb3J5KSk7XHJcbiAgICAvLyBhbGVydCh0aGlzLm1haW5jYXRlZ29yeS5tYWluY2F0ZWdvcnlfZW5kZGF0ZSk7XHJcbiAgICAvLyAgICAgIGFsZXJ0KG5ldyBEYXRlKE51bWJlcih0aGlzLm1haW5jYXRlZ29yeS5tYWluY2F0ZWdvcnlfZW5kZGF0ZSkgKSk7XHJcbiAgICAvLyAgICAgIGFsZXJ0KG5ldyBEYXRlKE51bWJlcih0aGlzLm1haW5jYXRlZ29yeS5tYWluY2F0ZWdvcnlfc3RhcnRkYXRlKSApKTtcclxuICAgIC8vIHRoaXMuc3RhcnRkYXRlICA9IG5ldyBEYXRlKE51bWJlcih0aGlzLm1haW5jYXRlZ29yeS5tYWluY2F0ZWdvcnlfc3RhcnRkYXRlICkpO1xyXG4gICAgLy8gdGhpcy5lbmRkYXRlICA9IG5ldyBEYXRlKE51bWJlcih0aGlzLm1haW5jYXRlZ29yeS5tYWluY2F0ZWdvcnlfZW5kZGF0ZSApKTtcclxuICB9XHJcblxyXG4gIC8vUHJlcGFyZSBmb3IgSlNPTiBmb3IgZmlsZSB0byBiZSB1cGxvYWRlZCB0byBzZXJ2ZXIganVzdCBhZnRlciBmb3JtIHN1Ym1pc3Npb25cclxuICBvbkZpbmFsRmlsZVVwbG9hZCgpeyAgIFxyXG4gIFxyXG4gICAgLy8gYWxlcnQodGhpcy51cGxvYWRlZEZpbGVzLmxlbmd0aCk7XHJcbiAgICAvLyBmb3IobGV0IGk9MDtpPHRoaXMudXBsb2FkZWRGaWxlcy5sZW5ndGg7aSsrKXtcclxuICAgIC8vICAgICAgIGxldCBmaWxlbmFtZT10aGlzLnVwbG9hZGVkRmlsZXNbaV0ubmFtZTtcclxuICAgICAgICAgXHJcbiAgICAgICAgICBcclxuICAgIC8vICAgICAgIHRoaXMuZmlsZXVwbG9hZC5maWxlTmFtZT1maWxlbmFtZTtcclxuICAgIC8vICAgICAgIHRoaXMuZmlsZXVwbG9hZC5maWxlUGF0aD0nJztcclxuICAgIC8vICAgICAgIHRoaXMuZmlsZXVwbG9hZC5maWxlU3RhdHVzPSdZZXMnO1xyXG4gICAgLy8gICAgICAgdGhpcy5maWxldXBsb2FkLmZpbGVUeXBlPSdpbWcnO1xyXG4gICAgLy8gICAgICAgdGhpcy5maWxldXBsb2FkLnVwbG9hZGZpbGVfZmlsZW5hbWU9Jyc7XHJcbiAgICAvLyAgICAgIC8vIGFsZXJ0KFwiaW5zaWRlZmlsZXVwbG9hZDogXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmZpbGV1cGxvYWQpKTtcclxuICAgIC8vICAgICAgIHRoaXMuZmlsZXVwbG9hZGFyci5wdXNoKHRoaXMuZmlsZXVwbG9hZCk7XHJcbiAgICAgICAgIFxyXG4gICAgLy8gICAgIH1cclxuICAgXHJcbiAgfSBcclxuXHJcbiAgLy8gRGF0ZSBjaGFuZ2UgZXZlbnQgdG8gZm9ybWF0IG5nbW9kZWwgdG8gb3VyIGZvcm1hdCBkYXRlIGFuZCBjYWxsaW5nIHBpcGUgXHJcbiAgLy8gc3RhcnRkYXRlY2hhbmdlKCl7XHJcbiAgLy8gICB0aGlzLm1haW5jYXRlZ29yeS5wcm9qbWlsZV9zdGFydGRhdGU9dGhpcy5teWRhdGUxLnBhcnNlKHRoaXMubWFpbmNhdGVnb3J5LnByb2ptaWxlX3N0YXJ0ZGF0ZSlcclxuICAvLyB9XHJcbiAgLy8gZW5kZGF0ZWNoYW5nZSgpe1xyXG4gIC8vICAgdGhpcy5tYWluY2F0ZWdvcnkucHJvam1pbGVfZW5kZGF0ZT10aGlzLm15ZGF0ZTEucGFyc2UodGhpcy5tYWluY2F0ZWdvcnkucHJvam1pbGVfZW5kZGF0ZSlcclxuICAvLyB9XHJcblxyXG5cclxuICBvblN1Ym1pdCgpe1xyXG4gICAgICAvLyAgIGFsZXJ0KEpTT04uc3RyaW5naWZ5KHRoaXMuc2VsZWN0ZWRSb3cpKTtcclxuICAgICAgICAvL2FsZXJ0KHRoaXMubWFpbmNhdGVnb3J5Lm1haW5jYXRlZ29yeV9zdGFydGRhdGUpO1xyXG4gICAgICAgIC8vIHRoaXMubWFpbmNhdGVnb3J5Lm1haW5jYXRlZ29yeV9zdGFydGRhdGU9dGhpcy5teWRhdGUxLnBhcnNlKHRoaXMuc3RhcnRkYXRlKVxyXG4gIFxyXG4gICAgICAgIC8vIHRoaXMubWFpbmNhdGVnb3J5Lm1haW5jYXRlZ29yeV9lbmRkYXRlPXRoaXMubXlkYXRlMS5wYXJzZSh0aGlzLmVuZGRhdGUpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5vbkZpbmFsRmlsZVVwbG9hZCgpO1xyXG4gICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1zZ3MgPSBbXTtcclxuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLm1haW5jYXRlZ29yeSkpO1xyXG4gICAgICAgIHRoaXMubXNncy5wdXNoKHtzZXZlcml0eTonaW5mbycsIHN1bW1hcnk6J1BsZWFzZSB3YWl0JywgZGV0YWlsOidGb3JtIFN1Ym1pdHRlZCBTdWNjZXNzZnVsbHkuLiBQbGVhc2Ugd2FpdC4uJ30pXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdvblN1Ym1pdCBvblJvd1NlbGVjdDogJyArIEpTT04uc3RyaW5naWZ5ICh0aGlzLm1haW5jYXRlZ29yeSkpO1xyXG4gICAgICAgIC8vICBjb25zb2xlLmxvZygnb25TdWJtaXQgb25Sb3dTZWxlY3QgZmlsZXVwbG9hZGFycjogJyArIEpTT04uc3RyaW5naWZ5ICh0aGlzLmZpbGV1cGxvYWRhcnIpKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5uZXdtYWluY2F0ZWdvcnkpey8vQWRkIG5ldyBlbnRyeSBzYXZpbmdcclxuICAgICAgICAgICB0aGlzLmxvY2FsU2VydmljZVxyXG4gICAgICAgICAgLmluc2VydCh0aGlzLm1haW5jYXRlZ29yeSlcclxuICAgICAgICAgIC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIC8qIGhhcHB5IHBhdGggKi8gcCA9PiB0aGlzLm1haW5jYXRlZ29yeXMgPSBwLFxyXG4gICAgICAgICAgICAvKiBlcnJvciBwYXRoICovIGUgPT4gY29uc29sZS5sb2coZSksXHJcbiAgICAgICAgICAgIC8qIG9uQ29tcGxldGUgKi8gKCkgPT4gdGhpcy5tc2dzLnB1c2goe3NldmVyaXR5OidpbmZvJywgc3VtbWFyeTonU3VjY2VzcycsIGRldGFpbDonRm9ybSBVcGRhdGUgU3VjY2Vzc2Z1bGx5J30pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXsgLy8gdXBkYXRlIGVudHJ5IHNhdmluZ1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ21haW5jYXRlZ29yeTogJyArIEpTT04uc3RyaW5naWZ5KCB0aGlzLm1haW5jYXRlZ29yeSkgKyAnICwgZjonICsgIEpTT04uc3RyaW5naWZ5KCB0aGlzLmZpbGV1cGxvYWRhcnIpKTtcclxuICAgICAgICAgIHRoaXMubG9jYWxTZXJ2aWNlXHJcbiAgICAgICAgICAudXBkYXRlKHRoaXMubWFpbmNhdGVnb3J5KVxyXG4gICAgICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgICAgLyogaGFwcHkgcGF0aCAqLyBwID0+IHRoaXMubWFpbmNhdGVnb3J5cyA9IHAsXHJcbiAgICAgICAgICAgIC8qIGVycm9yIHBhdGggKi8gZSA9PiBjb25zb2xlLmxvZyhlKSxcclxuICAgICAgICAgICAgLyogb25Db21wbGV0ZSAqLyAoKSA9PiB0aGlzLm1zZ3MucHVzaCh7c2V2ZXJpdHk6J2luZm8nLCBzdW1tYXJ5OidTdWNjZXNzJywgZGV0YWlsOidGb3JtIFVwZGF0ZSBTdWNjZXNzZnVsbHknfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMubXNncyA9IFtdO1xyXG4gICAgICAgICAgdGhpcy5tc2dzLnB1c2goe3NldmVyaXR5OidpbmZvJywgc3VtbWFyeTonU3VjY2VzcycsIGRldGFpbDonRm9ybSBVcGRhdGUgU3VjY2Vzc2Z1bGx5J30pO1xyXG4gICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgLy91cGxvYWQgZmlsZXMgdG8gdGhlIHNlcnZlclxyXG5vblVwbG9hZChldmVudDogYW55KXtcclxuICAvL2FsZXJ0KGV2ZW50LmZpbGVzKTtcclxuICAvLyBmb3IobGV0IGZpbGUgb2YgZXZlbnQuZmlsZXMpIHtcclxuICAgICAgICAgIFxyXG4gIC8vICAgICAgICAgdGhpcy51cGxvYWRlZEZpbGVzLnB1c2goZmlsZSk7XHJcbiAgLy8gfVxyXG4gIFxyXG4gIC8vIC8vY29uc29sZS5sb2coZXZlbnQueGhyLnJlc3BvbnNlKTtcclxuICAvLyB0aGlzLm1zZ3MgPSBbXTtcclxuICAvLyB0aGlzLm1zZ3MucHVzaCh7c2V2ZXJpdHk6ICdpbmZvJywgc3VtbWFyeTogJ0ZpbGUgVXBsb2FkZWQnLCBkZXRhaWw6ICcnfSk7XHJcbn1cclxuXHJcbiAgLy9GaWxlIHVwbG9hZCBldmVudFxyXG5vbkJlZm9yZVVwbG9hZChldmVudCA6YW55ICl7XHJcbiAgLy8gZXZlbnQueGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7bXVsdGlwYXJ0L2Zvcm0tZGF0YTsnKTtcclxuICAvLyBjb25zb2xlLmxvZyhcIm1pdGggaGVyZTpcIik7XHJcbn1cclxuXHJcbi8vRm9ybSBpbml0XHJcbm5nT25Jbml0KCkgeyBcclxuICAgICAgLy9DbGVhciBldmVudCBhbmQgaW5pdGFsaXplIG9iamVjdHNcclxuICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICBcclxuICAgICAgLy8gYWxlcnQoIHRoaXMuc3RhcnRkYXRlLmdldERheSArICcvJyArdGhpcy5zdGFydGRhdGUuZ2V0TW9udGggKyAnLycgK3RoaXMuc3RhcnRkYXRlLmdldEZ1bGxZZWFyKTsgXHJcbiAgICAgIC8vIGFsZXJ0KCAnbnVtYmVyOiAnICsgdGhpcy5teWN1ci5wYXJzZShcIjEwXCIpKTtcclxuICAgICAgLy8gbGV0IGJsOiBib29sZWFuO1xyXG4gICAgICAvLyBibCA9ICB0aGlzLmVtYWlsdmFsLnBhcnNlKCdhdHVsa3VsdmVnbWFpbC5jb20nLCcnKTtcclxuICAgICAgLy8gYWxlcnQoYmwgKTtcclxuXHJcbiAgICAgIC8vQ3JlYXRlIHVzZXJmb3JtIGFuZCBhcHBseSBWYWxpZGF0aW9uXHJcbiAgICAgIC8vIGFsZXJ0KHRoaXMubXlkYXRlMS5wYXJzZSggJzIwMTYtMTItMTNUMTg6MzA6MDAuMDAwWicpKTtcclxuXHJcblxyXG4gICAgICB0aGlzLnVzZXJmb3JtID0gdGhpcy5mYi5ncm91cCh7XHJcbiAgICAgICAgICAgICdtYWluY2F0X2FsaWFzbmFtZSc6bmV3IEZvcm1Db250cm9sKCcnLCBudWxsKSxcclxuICAgICAgICAgICAgJ21haW5jYXRfbmFtZSc6bmV3IEZvcm1Db250cm9sKCcnLFZhbGlkYXRvcnMucmVxdWlyZWQpfSk7XHJcblxyXG4gICAgICAgICBcclxuICAgICAgICAvL3ByZWxvYWQgZGF0YSBHcmlkIHJlcXVpcmVkIFxyXG4gICAgICAgIHRoaXMubG9jYWxTZXJ2aWNlXHJcbiAgICAgIC5nZXRhbGwoKVxyXG4gICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAvKiBoYXBweSBwYXRoICovIHAgPT4gdGhpcy5tYWluY2F0ZWdvcnlzPXAsXHJcbiAgICAgICAgIC8qIGVycm9yIHBhdGggKi8gZSA9PiBjb25zb2xlLmxvZyggZSksXHJcbiAgICAgICAgIC8qIG9uQ29tcGxldGUgKi8gKCkgPT4gdGhpcy5wcm9jZXNzZGF0YSgpKTtcclxuXHJcbiAgICAgICAgIFxyXG4gICAgICAgIFxyXG4gIH1cclxuICBwcm9jZXNzZGF0YSgpe1xyXG4gICAgXHJcblxyXG4gIH1cclxuICBwb3B1bGF0ZWRycCgpeyAvL3BvcHVsYXRlIGRyb3Bkb3ducyBvbiBwYWdlIGxvYWQuIGJ5IHVzaW5nIHB1c2ggYW5kIFNlbGVjdEl0ZW1cclxuICAgIC8vY29uc29sZS5sb2codGhpcy5kcnB2YXIubGVuZ3RoKTtcclxuICAgICAgICAvLyBmb3IodmFyIGkgPTA7aTx0aGlzLmRycHZhci5sZW5ndGg7aSsrKXtcclxuICAgICAgICAvLyAgIC8vYWxlcnQodGhpcy5kcnB2YXJbaV0ubGFiZWxkICsgJyA6ICcgICsgdGhpcy5kcnB2YXJbaV0udmFsdWVkKTtcclxuICAgICAgICAvLyAgICB0aGlzLmRycG1haW5jYXRlZ29yeS5wdXNoKHtsYWJlbDp0aGlzLmRycHZhcltpXS5sYWJlbGQgLCB2YWx1ZTp0aGlzLmRycHZhcltpXS52YWx1ZWR9KTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gLy8gYWxlcnQoSlNPTi5zdHJpbmdpZnkodGhpcy5kcnBtYWluY2F0ZWdvcnkpKTtcclxuXHJcbiAgfVxyXG5cclxuICAvL0Ryb3Bkb3duIGNoYW5nZSBldmVudCBjYXB0dXJlXHJcbiAgZHJwY2hhbmdlKGV2ZW50czE6IGFueSl7XHJcbiAgICAvLyBhbGVydChldmVudHMxLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8vSnVzdCBhIG1ldGhvZCB0byBjYWxsIHVzZXIgZm9ybSBkYXRhIG9uIGZvcm0gc3VibWl0XHJcbiAgZ2V0IGRpYWdub3N0aWMoKSB7IHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJmb3JtLnZhbHVlKTsgfVxyXG5cclxuIH1cclxuIl19
