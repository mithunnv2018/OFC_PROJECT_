"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/taxinformation/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var validator_directive_1 = require('../shared/validators/validator.directive');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var TaxinformationComponent = (function () {
    function TaxinformationComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.msgs = [];
        this.taxinformations = [];
        this.drpvar = [];
        this.drptaxinformation = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.mybaseurl = baseUrlservice.getBaseurl();
    }
    TaxinformationComponent.prototype.clear = function () {
        this.newtaxinformation = true;
        this.taxinformation = {
            status: 'active',
            comp_id: '',
            member_id: '',
            taxinformation_id: '1',
            taxinformation_name: '',
            taxinformation_budget: '',
            taxinformation_enddate: '',
            taxinformation_remarks: '',
            taxinformation_manhours: '',
            Taxinformation_timeframe: '',
            taxinformation_completed: 'No',
            taxinformation_startdate: '',
            taxinformation_commission: '',
            taxinformation_description: '',
            taxinformation_requireddaystocomplete: '',
        };
        this.fileupload = {
            fileName: '',
            fileType: '',
            filePath: '',
            fileStatus: '',
            uploadfile_filename: ''
        };
    };
    TaxinformationComponent.prototype.onRowSelect = function (event) {
        var _this = this;
        this.newtaxinformation = false;
        var tempproj;
        tempproj = this.selectedRow;
        this.localService
            .getselectAllfileTaxinformation(tempproj.taxinformation_id)
            .subscribe(function (p) { return _this.fileuploadarr = p; }, function (e) { return console.log(e); }, function () { return console.log('done getselectAllfileuploadtaxinformation: ' + _this.fileuploadarr); });
        this.localService
            .getedit(tempproj.taxinformation_id)
            .subscribe(function (p) { return _this.taxinformation = p; }, function (e) { return console.log(e); }, function () { _this.aftercalldate(); });
    };
    TaxinformationComponent.prototype.aftercalldate = function () {
        this.startdate = new Date(Number(this.taxinformation.taxinformation_startdate));
        this.enddate = new Date(Number(this.taxinformation.taxinformation_enddate));
    };
    TaxinformationComponent.prototype.onFinalFileUpload = function () {
        for (var i = 0; i < this.uploadedFiles.length; i++) {
            var filename = this.uploadedFiles[i].name;
            this.fileupload.fileName = filename;
            this.fileupload.filePath = '';
            this.fileupload.fileStatus = 'Yes';
            this.fileupload.fileType = 'img';
            this.fileupload.uploadfile_filename = '';
            this.fileuploadarr.push(this.fileupload);
        }
    };
    TaxinformationComponent.prototype.onSubmit = function () {
        var _this = this;
        this.taxinformation.taxinformation_startdate = this.mydate1.parse(this.startdate);
        this.taxinformation.taxinformation_enddate = this.mydate1.parse(this.enddate);
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        console.log(JSON.stringify(this.taxinformation));
        this.msgs.push({ severity: 'info', summary: 'Please wait', detail: 'Form Submitted Successfully.. Please wait..' });
        if (this.newtaxinformation) {
            this.localService
                .insert(this.taxinformation, this.fileuploadarr)
                .subscribe(function (p) { return _this.taxinformations = p; }, function (e) { return console.log(e); }, function () { return _this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' }); });
        }
        else {
            console.log('taxinformation: ' + JSON.stringify(this.taxinformation) + ' , f:' + JSON.stringify(this.fileuploadarr));
            this.localService
                .update(this.taxinformation, this.fileuploadarr)
                .subscribe(function (p) { return _this.taxinformations = p; }, function (e) { return console.log(e); }, function () { return _this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' }); });
        }
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
    };
    TaxinformationComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    TaxinformationComponent.prototype.onBeforeUpload = function (event) {
        event.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;multipart/form-data;');
        console.log("mith here:");
    };
    TaxinformationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        this.userform = this.fb.group({
            'name': new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, validator_directive_1.CustomValidator.isEmailValid])),
            'budget': new forms_1.FormControl('', forms_1.Validators.required),
            'remarks': new forms_1.FormControl('', forms_1.Validators.required),
            'manhours': new forms_1.FormControl('', forms_1.Validators.required),
            'startdatev': new forms_1.FormControl('', forms_1.Validators.required),
            'enddatev': new forms_1.FormControl('', forms_1.Validators.required),
            'timeframe': new forms_1.FormControl('', forms_1.Validators.required),
            'completed': new forms_1.FormControl('', forms_1.Validators.required),
            'commission': new forms_1.FormControl('', forms_1.Validators.required),
            'description': new forms_1.FormControl('', forms_1.Validators.required),
            'daysrequired': new forms_1.FormControl('', forms_1.Validators.required),
        });
        this.localService
            .getall()
            .subscribe(function (p) { return _this.taxinformations = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    TaxinformationComponent.prototype.processdata = function () {
    };
    TaxinformationComponent.prototype.populatedrp = function () {
        for (var i = 0; i < this.drpvar.length; i++) {
            this.drptaxinformation.push({ label: this.drpvar[i].labeld, value: this.drpvar[i].valued });
        }
    };
    TaxinformationComponent.prototype.drpchange = function (events1) {
    };
    Object.defineProperty(TaxinformationComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    TaxinformationComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-taxinformation',
            templateUrl: 'taxinformation.component.html',
            styleUrls: ['taxinformation.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.TaxinformationService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService])
    ], TaxinformationComponent);
    return TaxinformationComponent;
}());
exports.TaxinformationComponent = TaxinformationComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC90YXhpbmZvcm1hdGlvbi90YXhpbmZvcm1hdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHFCQUFpQyxlQUFlLENBQUMsQ0FBQTtBQUNqRCxzQkFBMkQsZ0JBQWdCLENBQUMsQ0FBQTtBQUk1RSx1QkFBdUMsaUJBQWlCLENBQUMsQ0FBQTtBQVN6RCwyQkFBK0IsNEJBQTRCLENBQUMsQ0FBQTtBQUM1RCxzQkFBc0MsZ0NBQWdDLENBQUMsQ0FBQTtBQUl2RSxrQ0FBNkIsbUNBQW1DLENBQUMsQ0FBQTtBQUNqRSxtQ0FBOEIsb0NBQW9DLENBQUMsQ0FBQTtBQUNuRSxvQ0FBZ0MsMENBQTBDLENBQUMsQ0FBQTtBQUMzRSxnQ0FBNkIsbUNBQW1DLENBQUMsQ0FBQTtBQVdqRTtJQW1FRSxpQ0FBb0IsRUFBZSxFQUNmLEtBQXFCLEVBQ3JCLE1BQWMsRUFDZCxZQUFtQyxFQUNuQyxLQUFxQixFQUNyQixPQUFxQixFQUNyQixRQUF1QixFQUN2QixjQUE2QjtRQVA3QixPQUFFLEdBQUYsRUFBRSxDQUFhO1FBQ2YsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGlCQUFZLEdBQVosWUFBWSxDQUF1QjtRQUNuQyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixZQUFPLEdBQVAsT0FBTyxDQUFjO1FBQ3JCLGFBQVEsR0FBUixRQUFRLENBQWU7UUFDdkIsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUF0RWpELFNBQUksR0FBWSxFQUFFLENBQUM7UUFHbkIsb0JBQWUsR0FBbUIsRUFBRSxDQUFDO1FBTXBDLFdBQU0sR0FBYyxFQUFFLENBQUM7UUFDdkIsc0JBQWlCLEdBQWUsRUFBRSxDQUFDO1FBV3BDLGtCQUFhLEdBQVUsRUFBRSxDQUFDO1FBRTFCLGtCQUFhLEdBQWUsRUFBRSxDQUFDO1FBaUR0QixJQUFJLENBQUMsU0FBUyxHQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUs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WUFFcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRyxLQUFLLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1FBQzVGLENBQUM7SUFHUCxDQUFDO0lBR0QsMkNBQVMsR0FBVCxVQUFVLE9BQVk7SUFFdEIsQ0FBQztJQUdELHNCQUFJLCtDQUFVO2FBQWQsY0FBbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBclJsRTtRQUFDLGdCQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixXQUFXLEVBQUUsK0JBQStCO1lBQzVDLFNBQVMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO1lBQzNDLFNBQVMsRUFBQyxDQUFDLDJCQUFjLEVBQUMsZ0NBQVksRUFBQyxrQ0FBYSxFQUFDLGdDQUFjLENBQUM7U0FDckUsQ0FBQzs7K0JBQUE7SUFpUkQsOEJBQUM7QUFBRCxDQWhSRCxBQWdSRSxJQUFBO0FBaFJXLCtCQUF1QiwwQkFnUmxDLENBQUEiLCJmaWxlIjoiYXBwL3RheGluZm9ybWF0aW9uL3RheGluZm9ybWF0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCxPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGb3JtR3JvdXAsRm9ybUNvbnRyb2wsVmFsaWRhdG9ycyxGb3JtQnVpbGRlcn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0Zvcm1zTW9kdWxlLFJlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtNZXNzYWdlc01vZHVsZSxNZXNzYWdlLEdyb3dsfSBmcm9tICdwcmltZW5nL3ByaW1lbmcnO1xyXG5pbXBvcnQge1BhbmVsTW9kdWxlfSBmcm9tICdwcmltZW5nL3ByaW1lbmcnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHtCdXR0b25Nb2R1bGV9IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcbmltcG9ydCB7VGF4aW5mb3JtYXRpb259IGZyb20gJy4vdGF4aW5mb3JtYXRpb24nO1xyXG5pbXBvcnQge0Ryb3Bkb3duMX0gZnJvbSAnLi9kcm9wZG93bjEnO1xyXG5pbXBvcnQge0ZpbGVVcGxvYWR9IGZyb20gJy4vZmlsZXVwbG9hZCc7XHJcbmltcG9ydCB7RGF0YVRhYmxlTW9kdWxlfSBmcm9tICdwcmltZW5nL3ByaW1lbmcnO1xyXG5pbXBvcnQge0Ryb3Bkb3duTW9kdWxlfSBmcm9tICdwcmltZW5nL3ByaW1lbmcnO1xyXG5cclxuXHJcbmltcG9ydCB7IE15Q3VycmVuY3lQaXBlIH0gZnJvbSAnLi4vc2hhcmVkL3BpcGVzL2ZpcnN0LnBpcGUnO1xyXG5pbXBvcnQgeyBUYXhpbmZvcm1hdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zaGFyZWQvdGF4aW5mb3JtYXRpb24vaW5kZXgnO1xyXG5cclxuaW1wb3J0IHtGaWxlVXBsb2FkTW9kdWxlfSBmcm9tICdwcmltZW5nL3ByaW1lbmcnO1xyXG5pbXBvcnQge1NlbGVjdEl0ZW19IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XHJcbmltcG9ydCB7IE15RGF0ZUZvcm1hdCB9IGZyb20gJy4uL3NoYXJlZC9waXBlcy9teWRhdGVmb3JtYXQucGlwZSc7XHJcbmltcG9ydCB7IEVtYWlsVmFsaWRhdGUgfSBmcm9tICcuLi9zaGFyZWQvcGlwZXMvZW1haWx2YWxpZGF0ZS5waXBlJztcclxuaW1wb3J0IHsgQ3VzdG9tVmFsaWRhdG9yIH0gZnJvbSAnLi4vc2hhcmVkL3ZhbGlkYXRvcnMvdmFsaWRhdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7QmFzZVVybFNlcnZpY2V9IGZyb20gJy4uL3NoYXJlZC9iYXNldXJsL2Jhc2V1cmwuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIGxhenkgbG9hZGVkIHRheGluZm9ybWF0aW9uQ29tcG9uZW50LlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICBzZWxlY3RvcjogJ3NkLXRheGluZm9ybWF0aW9uJyxcclxuICB0ZW1wbGF0ZVVybDogJ3RheGluZm9ybWF0aW9uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsndGF4aW5mb3JtYXRpb24uY29tcG9uZW50LmNzcyddLFxyXG4gIHByb3ZpZGVyczpbTXlDdXJyZW5jeVBpcGUsTXlEYXRlRm9ybWF0LEVtYWlsVmFsaWRhdGUsQmFzZVVybFNlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYXhpbmZvcm1hdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgLy9Gb3JtIGdyb3AgXHJcbiAgdXNlcmZvcm06IEZvcm1Hcm91cDtcclxuICAvLyBHcm93bCBtZXNzZWdlXHJcbiAgbXNnczogTWVzc2FnZVtdPVtdO1xyXG5cclxuICAvL0RlY2xhcmU6IERhdGEgaGFuZGxpbmcgZm9yIEdyaWQgZmxvdywgZm9ybSBmbG93XHJcbiAgdGF4aW5mb3JtYXRpb25zOiBUYXhpbmZvcm1hdGlvbltdPVtdO1xyXG4gIHN1Ym1pdHRlZDogYm9vbGVhbjtcclxuICB0YXhpbmZvcm1hdGlvbjogVGF4aW5mb3JtYXRpb247XHJcbiAgc2VsZWN0ZWRSb3c6IFRheGluZm9ybWF0aW9uO1xyXG5cclxuICAgLy8gRm9ybSBkYXRhIHByZWZpbGxlZFxyXG4gICBkcnB2YXI6IERyb3Bkb3duMVtdPVtdO1xyXG4gICBkcnB0YXhpbmZvcm1hdGlvbjogU2VsZWN0SXRlbVtdPVtdO1xyXG4gICBzdGFydGRhdGU6IERhdGU7XHJcbiAgIGVuZGRhdGU6IERhdGU7XHJcblxyXG4gICAvL2Jvb2xlYW4gdmFsdWUgZm9yIEFkZCBuZXcgb3IgRWRpdCBNb2RlXHJcbiAgIG5ld3RheGluZm9ybWF0aW9uOiBib29sZWFuO1xyXG4gICBcclxuICAvLyAgc2VsZWN0ZWR0YXhpbmZvcm1hdGlvbjogc3RyaW5nO1xyXG4gICAgICAgXHJcbiAgLy8qKiogZmlsZXVwbG9hZCBEZWNsYXJlICoqKlxyXG4gIC8vQ2xpZW50IGZvcm1hdCBmb3IgZmlsZSB1cGxvYWRcclxuICB1cGxvYWRlZEZpbGVzOiBhbnlbXSA9IFtdO1xyXG4gIC8vc2VydmVyIGZvcm1hdCBmb3IgZmlsZSB1cGxvYWRcclxuICBmaWxldXBsb2FkYXJyOiBGaWxlVXBsb2FkW109W107XHJcbiAgZmlsZXVwbG9hZDogRmlsZVVwbG9hZDtcclxuXHJcbiAgbXliYXNldXJsOnN0cmluZztcclxuXHJcbiAgLy9QcmVwYXJlIGRhdGEgZm9yIG5ldyBlbnRyeSBvciBpbml0aXplIGRhdGEgZHVyaW5nIGZvcm0gbG9hZCBieSBjbGVhcmluZyBkYXRhIG9yIHByZXNldHRpbmcgZGF0YVxyXG4gIGNsZWFyKCl7XHJcbiAgICAgICAgdGhpcy5uZXd0YXhpbmZvcm1hdGlvbj10cnVlO1xyXG4gICAgICAgIHRoaXMudGF4aW5mb3JtYXRpb249e1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIHN0YXR1cyA6J2FjdGl2ZScsXHJcbiAgICAgICAgICBjb21wX2lkIDonJyxcclxuICAgICAgICAgIG1lbWJlcl9pZCA6JycsXHJcbiAgICAgICAgICB0YXhpbmZvcm1hdGlvbl9pZDonMScsXHJcbiAgICAgICAgICB0YXhpbmZvcm1hdGlvbl9uYW1lOicnLFxyXG4gICAgICAgICAgdGF4aW5mb3JtYXRpb25fYnVkZ2V0OicnLFxyXG4gICAgICAgICAgdGF4aW5mb3JtYXRpb25fZW5kZGF0ZTonJyxcclxuICAgICAgICAgIHRheGluZm9ybWF0aW9uX3JlbWFya3M6JycsXHJcbiAgICAgICAgICB0YXhpbmZvcm1hdGlvbl9tYW5ob3VyczonJyxcclxuICAgICAgICAgIFRheGluZm9ybWF0aW9uX3RpbWVmcmFtZTonJyxcclxuICAgICAgICAgIHRheGluZm9ybWF0aW9uX2NvbXBsZXRlZDonTm8nLFxyXG4gICAgICAgICAgdGF4aW5mb3JtYXRpb25fc3RhcnRkYXRlOicnLFxyXG4gICAgICAgICAgdGF4aW5mb3JtYXRpb25fY29tbWlzc2lvbjonJyxcclxuICAgICAgICAgIHRheGluZm9ybWF0aW9uX2Rlc2NyaXB0aW9uOicnLFxyXG4gICAgICAgICAgdGF4aW5mb3JtYXRpb25fcmVxdWlyZWRkYXlzdG9jb21wbGV0ZTonJyxcclxuICAgICAgfVxyXG5cclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgIHRoaXMuZmlsZXVwbG9hZD17XHJcbiAgICAgIGZpbGVOYW1lOiAnJyxcclxuICAgICAgZmlsZVR5cGU6ICcnLFxyXG4gICAgICBmaWxlUGF0aDogJycsXHJcbiAgICAgIGZpbGVTdGF0dXM6ICcnLFxyXG4gICAgICB1cGxvYWRmaWxlX2ZpbGVuYW1lOiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gY29uc3RydWN0b3IgaW5pdGlhemUgb2YgYWxsIG5lY2Vzc2FyeSB2YXJpYWJsZSBhbmQgb2JqZWN0c1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBsb2NhbFNlcnZpY2U6IFRheGluZm9ybWF0aW9uU2VydmljZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIG15Y3VyOiBNeUN1cnJlbmN5UGlwZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIG15ZGF0ZTE6IE15RGF0ZUZvcm1hdCxcclxuICAgICAgICAgICAgICBwcml2YXRlIGVtYWlsdmFsOiBFbWFpbFZhbGlkYXRlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgYmFzZVVybHNlcnZpY2U6QmFzZVVybFNlcnZpY2VcclxuICAgICAgICAgICAgICApe1xyXG4gICAgICAgICAgIHRoaXMubXliYXNldXJsPWJhc2VVcmxzZXJ2aWNlLmdldEJhc2V1cmwoKTsgICAgIFxyXG4gICAgICAgICAgLy8gZHJwb3AgZG93biBjYW4gb25seSBiZSBwb3B1bGF0ZWQgaW4gY29uc3RydWN0b3IgYW5kIG5vdCBpbiBuZ2luaXQoKVxyXG4gICAgICAgICAgLy8gdGhpcy5sb2NhbFNlcnZpY2VcclxuICAgICAgICAgIC8vIC5nZXRzZWxlY3RkcnB0YXhpbmZvcm1hdGlvbignaGonKVxyXG4gICAgICAgICAgLy8gLnN1YnNjcmliZShcclxuICAgICAgICAgIC8vICAgLyogaGFwcHkgcGF0aCAqLyBwID0+dGhpcy5kcnB2YXI9cCwvL2FsZXJ0KCBKU09OLnN0cmluZ2lmeSggcCkpLFxyXG4gICAgICAgICAgLy8gICAvKiBlcnJvciBwYXRoICovIGUgPT4gY29uc29sZS5sb2coZSksXHJcbiAgICAgICAgICAvLyAgIC8qIG9uQ29tcGxldGUgKi8gKCkgPT4gdGhpcy5wb3B1bGF0ZWRycCgpKTsvL3t0aGlzLm15bWV0aG9kKHRoaXMuZHJwdmFyKTt9KTsvL3RoaXMubXNncy5wdXNoKHtzZXZlcml0eTonaW5mbycsIHN1bW1hcnk6J1N1Y2Nlc3MnLCBkZXRhaWw6J0Zvcm0gVXBkYXRlIFN1Y2Nlc3NmdWxseTogJyArIEpTT04uc3RyaW5naWZ5KCB0aGlzLmRycHZhcikgKyAnIDogJyArIHRoaXMuZHJwdmFyLmxlbmd0aH0pKTtcclxuXHJcbiAgICBcclxuICB9XHJcbiAgb25Sb3dTZWxlY3QoZXZlbnQ6IGFueSl7XHJcbiAgICAgICAgIC8vSW5kaWNhdG9yIGZvciBmb3JtIGlzIGluIEVkaXQgbW9kZVxyXG4gICAgICAgICB0aGlzLm5ld3RheGluZm9ybWF0aW9uPWZhbHNlO1xyXG4gICAgICAgICAvL0NvcHkgb2Ygcm93IHNlbGVjdGVkXHJcbiAgICAgICAgLy8gIHRoaXMudGF4aW5mb3JtYXRpb249dGhpcy5zZWxlY3RlZFJvdztcclxuICAgICAgICAgbGV0IHRlbXBwcm9qOiBUYXhpbmZvcm1hdGlvbjtcclxuICAgICAgICAgdGVtcHByb2ogPSB0aGlzLnNlbGVjdGVkUm93O1xyXG4gICAgICAgICAvL0NhbGxpbmcgV1MgdG8gZ2V0IHRoZSBzZWxlY3RlZCBkYXRhIGZyb20gc2VydmVyIERCIG9mIHRoZSBzZWxlY3RlZCByb3dcclxuICAgICAgICAgdGhpcy5sb2NhbFNlcnZpY2VcclxuICAgICAgLmdldHNlbGVjdEFsbGZpbGVUYXhpbmZvcm1hdGlvbih0ZW1wcHJvai50YXhpbmZvcm1hdGlvbl9pZClcclxuICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgLyogaGFwcHkgcGF0aCAqLyBwID0+IHRoaXMuZmlsZXVwbG9hZGFycj1wLFxyXG4gICAgICAgICAvKiBlcnJvciBwYXRoICovIGUgPT4gY29uc29sZS5sb2coIGUpLFxyXG4gICAgICAgICAvKiBvbkNvbXBsZXRlICovICgpID0+IGNvbnNvbGUubG9nKCdkb25lIGdldHNlbGVjdEFsbGZpbGV1cGxvYWR0YXhpbmZvcm1hdGlvbjogJyArIHRoaXMuZmlsZXVwbG9hZGFycikpO1xyXG5cclxuICAgICAgICAvLyAgY29uc29sZS5sb2coJ29uUm93U2VsZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkgKHRoaXMudGF4aW5mb3JtYXRpb24pKTtcclxuICAgICAgICAvLyAgY29uc29sZS5sb2coJ29uUm93U2VsZWN0IGZpbGV1cGxvYWRhcnI6ICcgKyBKU09OLnN0cmluZ2lmeSAodGhpcy5maWxldXBsb2FkYXJyKSk7XHJcblxyXG4gICAgICAgICAvL0NhbGxpbmcgV1MgdG8gZ2V0IHRoZSBzZWxlY3RlZCBkYXRhIGZyb20gc2VydmVyIERCIG9mIHRoZSBzZWxlY3RlZCByb3dcclxuICAgICAgICB0aGlzLmxvY2FsU2VydmljZVxyXG4gICAgICAuZ2V0ZWRpdCh0ZW1wcHJvai50YXhpbmZvcm1hdGlvbl9pZClcclxuICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgLyogaGFwcHkgcGF0aCAqLyBwID0+IHRoaXMudGF4aW5mb3JtYXRpb249cCxcclxuICAgICAgICAgLyogZXJyb3IgcGF0aCAqLyBlID0+IGNvbnNvbGUubG9nKCBlKSxcclxuICAgICAgICAgLyogb25Db21wbGV0ZSAqLyAoKSA9PiB7dGhpcy5hZnRlcmNhbGxkYXRlKCk7fSApOy8vY29uc29sZS5sb2coJ2RvbmUgZ2V0c2VsZWN0RWRpdHRheGluZm9ybWF0aW9uOiAnICsgdGhpcy50YXhpbmZvcm1hdGlvbikpO1xyXG5cclxuICAgICAgICAgXHJcbiAgICAgICAgIFxyXG4gIH1cclxuICBhZnRlcmNhbGxkYXRlKCl7XHJcbiAgICAvLyAgYWxlcnQoSlNPTi5zdHJpbmdpZnkoIHRoaXMudGF4aW5mb3JtYXRpb24pKTtcclxuICAgIC8vIGFsZXJ0KHRoaXMudGF4aW5mb3JtYXRpb24udGF4aW5mb3JtYXRpb25fZW5kZGF0ZSk7XHJcbiAgICAvLyAgICAgIGFsZXJ0KG5ldyBEYXRlKE51bWJlcih0aGlzLnRheGluZm9ybWF0aW9uLnRheGluZm9ybWF0aW9uX2VuZGRhdGUpICkpO1xyXG4gICAgLy8gICAgICBhbGVydChuZXcgRGF0ZShOdW1iZXIodGhpcy50YXhpbmZvcm1hdGlvbi50YXhpbmZvcm1hdGlvbl9zdGFydGRhdGUpICkpO1xyXG4gICAgdGhpcy5zdGFydGRhdGUgID0gbmV3IERhdGUoTnVtYmVyKHRoaXMudGF4aW5mb3JtYXRpb24udGF4aW5mb3JtYXRpb25fc3RhcnRkYXRlICkpO1xyXG4gICAgdGhpcy5lbmRkYXRlICA9IG5ldyBEYXRlKE51bWJlcih0aGlzLnRheGluZm9ybWF0aW9uLnRheGluZm9ybWF0aW9uX2VuZGRhdGUgKSk7XHJcbiAgfVxyXG5cclxuICAvL1ByZXBhcmUgZm9yIEpTT04gZm9yIGZpbGUgdG8gYmUgdXBsb2FkZWQgdG8gc2VydmVyIGp1c3QgYWZ0ZXIgZm9ybSBzdWJtaXNzaW9uXHJcbiAgb25GaW5hbEZpbGVVcGxvYWQoKXsgICBcclxuICBcclxuICAgIC8vIGFsZXJ0KHRoaXMudXBsb2FkZWRGaWxlcy5sZW5ndGgpO1xyXG4gICAgZm9yKGxldCBpPTA7aTx0aGlzLnVwbG9hZGVkRmlsZXMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICBsZXQgZmlsZW5hbWU9dGhpcy51cGxvYWRlZEZpbGVzW2ldLm5hbWU7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB0aGlzLmZpbGV1cGxvYWQuZmlsZU5hbWU9ZmlsZW5hbWU7XHJcbiAgICAgICAgICB0aGlzLmZpbGV1cGxvYWQuZmlsZVBhdGg9Jyc7XHJcbiAgICAgICAgICB0aGlzLmZpbGV1cGxvYWQuZmlsZVN0YXR1cz0nWWVzJztcclxuICAgICAgICAgIHRoaXMuZmlsZXVwbG9hZC5maWxlVHlwZT0naW1nJztcclxuICAgICAgICAgIHRoaXMuZmlsZXVwbG9hZC51cGxvYWRmaWxlX2ZpbGVuYW1lPScnO1xyXG4gICAgICAgICAvLyBhbGVydChcImluc2lkZWZpbGV1cGxvYWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5maWxldXBsb2FkKSk7XHJcbiAgICAgICAgICB0aGlzLmZpbGV1cGxvYWRhcnIucHVzaCh0aGlzLmZpbGV1cGxvYWQpO1xyXG4gICAgICAgICBcclxuICAgICAgICB9XHJcbiAgIFxyXG4gIH0gXHJcblxyXG4gIC8vIERhdGUgY2hhbmdlIGV2ZW50IHRvIGZvcm1hdCBuZ21vZGVsIHRvIG91ciBmb3JtYXQgZGF0ZSBhbmQgY2FsbGluZyBwaXBlIFxyXG4gIC8vIHN0YXJ0ZGF0ZWNoYW5nZSgpe1xyXG4gIC8vICAgdGhpcy50YXhpbmZvcm1hdGlvbi5wcm9qbWlsZV9zdGFydGRhdGU9dGhpcy5teWRhdGUxLnBhcnNlKHRoaXMudGF4aW5mb3JtYXRpb24ucHJvam1pbGVfc3RhcnRkYXRlKVxyXG4gIC8vIH1cclxuICAvLyBlbmRkYXRlY2hhbmdlKCl7XHJcbiAgLy8gICB0aGlzLnRheGluZm9ybWF0aW9uLnByb2ptaWxlX2VuZGRhdGU9dGhpcy5teWRhdGUxLnBhcnNlKHRoaXMudGF4aW5mb3JtYXRpb24ucHJvam1pbGVfZW5kZGF0ZSlcclxuICAvLyB9XHJcblxyXG5cclxuICBvblN1Ym1pdCgpe1xyXG4gICAgICAvLyAgIGFsZXJ0KEpTT04uc3RyaW5naWZ5KHRoaXMuc2VsZWN0ZWRSb3cpKTtcclxuICAgICAgICAvL2FsZXJ0KHRoaXMudGF4aW5mb3JtYXRpb24udGF4aW5mb3JtYXRpb25fc3RhcnRkYXRlKTtcclxuICAgICAgICB0aGlzLnRheGluZm9ybWF0aW9uLnRheGluZm9ybWF0aW9uX3N0YXJ0ZGF0ZT10aGlzLm15ZGF0ZTEucGFyc2UodGhpcy5zdGFydGRhdGUpXHJcbiAgXHJcbiAgICAgICAgdGhpcy50YXhpbmZvcm1hdGlvbi50YXhpbmZvcm1hdGlvbl9lbmRkYXRlPXRoaXMubXlkYXRlMS5wYXJzZSh0aGlzLmVuZGRhdGUpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5vbkZpbmFsRmlsZVVwbG9hZCgpO1xyXG4gICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1zZ3MgPSBbXTtcclxuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLnRheGluZm9ybWF0aW9uKSk7XHJcbiAgICAgICAgdGhpcy5tc2dzLnB1c2goe3NldmVyaXR5OidpbmZvJywgc3VtbWFyeTonUGxlYXNlIHdhaXQnLCBkZXRhaWw6J0Zvcm0gU3VibWl0dGVkIFN1Y2Nlc3NmdWxseS4uIFBsZWFzZSB3YWl0Li4nfSlcclxuICAgICAgICBcclxuICAgICAgICAvLyAgY29uc29sZS5sb2coJ29uU3VibWl0IG9uUm93U2VsZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkgKHRoaXMudGF4aW5mb3JtYXRpb24pKTtcclxuICAgICAgICAvLyAgY29uc29sZS5sb2coJ29uU3VibWl0IG9uUm93U2VsZWN0IGZpbGV1cGxvYWRhcnI6ICcgKyBKU09OLnN0cmluZ2lmeSAodGhpcy5maWxldXBsb2FkYXJyKSk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubmV3dGF4aW5mb3JtYXRpb24pey8vQWRkIG5ldyBlbnRyeSBzYXZpbmdcclxuICAgICAgICAgICB0aGlzLmxvY2FsU2VydmljZVxyXG4gICAgICAgICAgLmluc2VydCh0aGlzLnRheGluZm9ybWF0aW9uLHRoaXMuZmlsZXVwbG9hZGFycilcclxuICAgICAgICAgIC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIC8qIGhhcHB5IHBhdGggKi8gcCA9PiB0aGlzLnRheGluZm9ybWF0aW9ucyA9IHAsXHJcbiAgICAgICAgICAgIC8qIGVycm9yIHBhdGggKi8gZSA9PiBjb25zb2xlLmxvZyhlKSxcclxuICAgICAgICAgICAgLyogb25Db21wbGV0ZSAqLyAoKSA9PiB0aGlzLm1zZ3MucHVzaCh7c2V2ZXJpdHk6J2luZm8nLCBzdW1tYXJ5OidTdWNjZXNzJywgZGV0YWlsOidGb3JtIFVwZGF0ZSBTdWNjZXNzZnVsbHknfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNleyAvLyB1cGRhdGUgZW50cnkgc2F2aW5nXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygndGF4aW5mb3JtYXRpb246ICcgKyBKU09OLnN0cmluZ2lmeSggdGhpcy50YXhpbmZvcm1hdGlvbikgKyAnICwgZjonICsgIEpTT04uc3RyaW5naWZ5KCB0aGlzLmZpbGV1cGxvYWRhcnIpKTtcclxuICAgICAgICAgIHRoaXMubG9jYWxTZXJ2aWNlXHJcbiAgICAgICAgICAudXBkYXRlKHRoaXMudGF4aW5mb3JtYXRpb24sdGhpcy5maWxldXBsb2FkYXJyKVxyXG4gICAgICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgICAgLyogaGFwcHkgcGF0aCAqLyBwID0+IHRoaXMudGF4aW5mb3JtYXRpb25zID0gcCxcclxuICAgICAgICAgICAgLyogZXJyb3IgcGF0aCAqLyBlID0+IGNvbnNvbGUubG9nKGUpLFxyXG4gICAgICAgICAgICAvKiBvbkNvbXBsZXRlICovICgpID0+IHRoaXMubXNncy5wdXNoKHtzZXZlcml0eTonaW5mbycsIHN1bW1hcnk6J1N1Y2Nlc3MnLCBkZXRhaWw6J0Zvcm0gVXBkYXRlIFN1Y2Nlc3NmdWxseSd9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5zdWJtaXR0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgdGhpcy5tc2dzID0gW107XHJcbiAgICAgICAgICB0aGlzLm1zZ3MucHVzaCh7c2V2ZXJpdHk6J2luZm8nLCBzdW1tYXJ5OidTdWNjZXNzJywgZGV0YWlsOidGb3JtIFVwZGF0ZSBTdWNjZXNzZnVsbHknfSk7XHJcbiAgfVxyXG5cclxuICAvL3VwbG9hZCBmaWxlcyB0byB0aGUgc2VydmVyXHJcbm9uVXBsb2FkKGV2ZW50OiBhbnkpe1xyXG4gIC8vYWxlcnQoZXZlbnQuZmlsZXMpO1xyXG4gIGZvcihsZXQgZmlsZSBvZiBldmVudC5maWxlcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB0aGlzLnVwbG9hZGVkRmlsZXMucHVzaChmaWxlKTtcclxuICB9XHJcbiAgXHJcbiAgLy9jb25zb2xlLmxvZyhldmVudC54aHIucmVzcG9uc2UpO1xyXG4gIHRoaXMubXNncyA9IFtdO1xyXG4gIHRoaXMubXNncy5wdXNoKHtzZXZlcml0eTogJ2luZm8nLCBzdW1tYXJ5OiAnRmlsZSBVcGxvYWRlZCcsIGRldGFpbDogJyd9KTtcclxufVxyXG5cclxuICAvL0ZpbGUgdXBsb2FkIGV2ZW50XHJcbm9uQmVmb3JlVXBsb2FkKGV2ZW50IDphbnkgKXtcclxuICBldmVudC54aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDttdWx0aXBhcnQvZm9ybS1kYXRhOycpO1xyXG4gIGNvbnNvbGUubG9nKFwibWl0aCBoZXJlOlwiKTtcclxufVxyXG5cclxuLy9Gb3JtIGluaXRcclxubmdPbkluaXQoKSB7IFxyXG4gICAgICAvL0NsZWFyIGV2ZW50IGFuZCBpbml0YWxpemUgb2JqZWN0c1xyXG4gICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBhbGVydCggdGhpcy5zdGFydGRhdGUuZ2V0RGF5ICsgJy8nICt0aGlzLnN0YXJ0ZGF0ZS5nZXRNb250aCArICcvJyArdGhpcy5zdGFydGRhdGUuZ2V0RnVsbFllYXIpOyBcclxuICAgICAgLy8gYWxlcnQoICdudW1iZXI6ICcgKyB0aGlzLm15Y3VyLnBhcnNlKFwiMTBcIikpO1xyXG4gICAgICAvLyBsZXQgYmw6IGJvb2xlYW47XHJcbiAgICAgIC8vIGJsID0gIHRoaXMuZW1haWx2YWwucGFyc2UoJ2F0dWxrdWx2ZWdtYWlsLmNvbScsJycpO1xyXG4gICAgICAvLyBhbGVydChibCApO1xyXG5cclxuICAgICAgLy9DcmVhdGUgdXNlcmZvcm0gYW5kIGFwcGx5IFZhbGlkYXRpb25cclxuICAgICAgLy8gYWxlcnQodGhpcy5teWRhdGUxLnBhcnNlKCAnMjAxNi0xMi0xM1QxODozMDowMC4wMDBaJykpO1xyXG4gICAgICB0aGlzLnVzZXJmb3JtID0gdGhpcy5mYi5ncm91cCh7XHJcbiAgICAgICAgICAgICduYW1lJzogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLmNvbXBvc2UoW1ZhbGlkYXRvcnMucmVxdWlyZWQsQ3VzdG9tVmFsaWRhdG9yLmlzRW1haWxWYWxpZF0pKSxcclxuICAgICAgICAgICAgICdidWRnZXQnOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxyXG4gICAgICAgICAgICAgJ3JlbWFya3MnOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxyXG4gICAgICAgICAgICAgJ21hbmhvdXJzJzogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcclxuICAgICAgICAgICAgICdzdGFydGRhdGV2JzogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcclxuICAgICAgICAgICAgICdlbmRkYXRldic6IG5ldyBGb3JtQ29udHJvbCgnJywgVmFsaWRhdG9ycy5yZXF1aXJlZCksXHJcbiAgICAgICAgICAgICAndGltZWZyYW1lJzogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcclxuICAgICAgICAgICAgICdjb21wbGV0ZWQnOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxyXG4gICAgICAgICAgICAgJ2NvbW1pc3Npb24nOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxyXG4gICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcclxuICAgICAgICAgICAgICdkYXlzcmVxdWlyZWQnOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvL3ByZWxvYWQgZGF0YSBHcmlkIHJlcXVpcmVkIFxyXG4gICAgICAgIHRoaXMubG9jYWxTZXJ2aWNlXHJcbiAgICAgIC5nZXRhbGwoKVxyXG4gICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAvKiBoYXBweSBwYXRoICovIHAgPT4gdGhpcy50YXhpbmZvcm1hdGlvbnM9cCxcclxuICAgICAgICAgLyogZXJyb3IgcGF0aCAqLyBlID0+IGNvbnNvbGUubG9nKCBlKSxcclxuICAgICAgICAgLyogb25Db21wbGV0ZSAqLyAoKSA9PiB0aGlzLnByb2Nlc3NkYXRhKCkpO1xyXG5cclxuICAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgfVxyXG4gIHByb2Nlc3NkYXRhKCl7XHJcbiAgICBcclxuXHJcbiAgfVxyXG4gIHBvcHVsYXRlZHJwKCl7IC8vcG9wdWxhdGUgZHJvcGRvd25zIG9uIHBhZ2UgbG9hZC4gYnkgdXNpbmcgcHVzaCBhbmQgU2VsZWN0SXRlbVxyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLmRycHZhci5sZW5ndGgpO1xyXG4gICAgICAgIGZvcih2YXIgaSA9MDtpPHRoaXMuZHJwdmFyLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgLy9hbGVydCh0aGlzLmRycHZhcltpXS5sYWJlbGQgKyAnIDogJyAgKyB0aGlzLmRycHZhcltpXS52YWx1ZWQpO1xyXG4gICAgICAgICAgIHRoaXMuZHJwdGF4aW5mb3JtYXRpb24ucHVzaCh7bGFiZWw6dGhpcy5kcnB2YXJbaV0ubGFiZWxkICwgdmFsdWU6dGhpcy5kcnB2YXJbaV0udmFsdWVkfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsZXJ0KEpTT04uc3RyaW5naWZ5KHRoaXMuZHJwdGF4aW5mb3JtYXRpb24pKTtcclxuXHJcbiAgfVxyXG5cclxuICAvL0Ryb3Bkb3duIGNoYW5nZSBldmVudCBjYXB0dXJlXHJcbiAgZHJwY2hhbmdlKGV2ZW50czE6IGFueSl7XHJcbiAgICAvLyBhbGVydChldmVudHMxLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8vSnVzdCBhIG1ldGhvZCB0byBjYWxsIHVzZXIgZm9ybSBkYXRhIG9uIGZvcm0gc3VibWl0XHJcbiAgZ2V0IGRpYWdub3N0aWMoKSB7IHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJmb3JtLnZhbHVlKTsgfVxyXG5cclxuIH1cclxuIl19
