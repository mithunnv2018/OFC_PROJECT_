"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var router_1 = require('@angular/router');
var first_pipe_1 = require('../shared/pipes/first.pipe');
var index_1 = require('../shared/searchfreelancers/index');
var mydateformat_pipe_1 = require('../shared/pipes/mydateformat.pipe');
var emailvalidate_pipe_1 = require('../shared/pipes/emailvalidate.pipe');
var baseurl_service_1 = require('../shared/baseurl/baseurl.service');
var index_2 = require('../shared/postajob/index');
var SearchFreeLancersComponent = (function () {
    function SearchFreeLancersComponent(fb, route, router, localService, mycur, mydate1, emailval, baseUrlservice, postajobService) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.localService = localService;
        this.mycur = mycur;
        this.mydate1 = mydate1;
        this.emailval = emailval;
        this.baseUrlservice = baseUrlservice;
        this.postajobService = postajobService;
        this.msgs = [];
        this.drpvar = [];
        this.drpsearchfreelancers = [];
        this.uploadedFiles = [];
        this.fileuploadarr = [];
        this.freelancermembers = [];
        this.drpCountryId = [];
        this.drpLanguageId = [];
        this.selectedCountry = "";
        this.selectedLanguage = "";
        this.pricerange = [];
        this.daterange = [];
        this.selectedTypeskeyword = [];
        this.keyword = [];
        this.subcat = [];
        this.mybaseurl = baseUrlservice.getBaseurl() + "searchfreelancers/";
    }
    SearchFreeLancersComponent.prototype.clear = function () {
        this.keyword = [];
        this.subcat = [];
        this.selectedTypesubcat = null;
        this.selectedTypeskeyword = [];
        this.newsearchfreelancers = true;
        this.freelancermember = {
            "ofcmembers_id": "",
            "ofcmembers_fname": "",
            "ofcmembers_mname": "",
            "ofcmembers_lname": "",
            "ofcmembers_name": "",
            "ofcmember_type": "",
            "city_id": "",
            "ofcmembers_emailid": "",
            "ofcmembers_password": "",
            "ofcmembers_address1": "",
            "ofcmembers_address2": "",
            "ofcmembers_pincode": "",
            "ofcmembers_contactnos": "",
            "ofcmembers_availability": "",
            "ofcmembers_displayname": "",
            "ofcmembers_description": "",
            "ofcmembers_selfrating": "",
            "ofcmembers_experiencelevel": "",
            "ofcmembers_gender": "",
            "ofcmembers_dob": "",
            "ofcmembers_nosofteammembers": "",
            "status": "",
            "country_id": "",
            "country_name": "",
            "state_id": "",
            "state_name": "",
            "city_name": "",
            "skillsarr": []
        };
        this.fileupload = {
            fileName: '',
            fileType: '',
            filePath: '',
            fileStatus: '',
            uploadfile_filename: ''
        };
    };
    SearchFreeLancersComponent.prototype.onRowSelect = function (tempproj) {
        this.newsearchfreelancers = false;
        var memid = tempproj.ofcmembers_id;
        this.router.navigate(['/searchfreelancersdetails', memid]);
    };
    SearchFreeLancersComponent.prototype.aftercalldate = function () {
    };
    SearchFreeLancersComponent.prototype.onFinalFileUpload = function () {
        for (var i = 0; i < this.uploadedFiles.length; i++) {
            var filename = this.uploadedFiles[i].name;
            this.fileupload.fileName = filename;
            this.fileupload.filePath = '';
            this.fileupload.fileStatus = 'Yes';
            this.fileupload.fileType = 'img';
            this.fileupload.uploadfile_filename = '';
            this.fileuploadarr.push(this.fileupload);
        }
    };
    SearchFreeLancersComponent.prototype.onSubmit = function () {
        this.onFinalFileUpload();
        this.submitted = true;
        this.msgs = [];
        this.submitted = true;
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Success', detail: 'Form Update Successfully' });
    };
    SearchFreeLancersComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    SearchFreeLancersComponent.prototype.onBeforeUpload = function (event) {
        event.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;multipart/form-data;');
        console.log("mith here:");
    };
    SearchFreeLancersComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clear();
        var data = sessionStorage.getItem('memberdetails');
        console.log('onsessionStorage : ' + JSON.parse(data));
        var ofcmemsession = JSON.parse(data);
        var ofcmemsession_id = ofcmemsession.ofcmemsession_id;
        console.log('ofcmemsession_id : ' + ofcmemsession_id);
        var member_id = ofcmemsession.ofcmembers_id;
        var catid = '6';
        this.postajobService.getSubCat(catid)
            .subscribe(function (p) { return _this.subcat = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
        this.localService
            .getall(ofcmemsession_id)
            .subscribe(function (p) { return _this.freelancermembers = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
        this.postajobService.getCountry('hj').subscribe(function (p) { _this.drpCountryId = p; _this.drpCountryId.unshift({ label: "Select Country", value: "1" }); }, function (e) { return console.log(e); }, function () { return console.log(_this.drpCountryId); });
        this.postajobService.getLanguage('hj').subscribe(function (p) { _this.drpLanguageId = p; _this.drpLanguageId.unshift({ label: "Select Language", value: "1" }); }, function (e) { return console.log(e); }, function () { return console.log(_this.drpLanguageId); });
        var a = { label: "Select Price", value: "0" };
        this.pricerange.push(a);
        var b = { label: "Select Date", value: "0" };
        this.daterange.push(b);
    };
    SearchFreeLancersComponent.prototype.processdata = function () {
    };
    SearchFreeLancersComponent.prototype.populatedrp = function () {
        for (var i = 0; i < this.drpvar.length; i++) {
            this.drpsearchfreelancers.push({ label: this.drpvar[i].labeld, value: this.drpvar[i].valued });
        }
    };
    SearchFreeLancersComponent.prototype.drpchange = function (events1) {
    };
    SearchFreeLancersComponent.prototype.getSkillList = function (skillList) {
        var a = "";
        for (var i = 0; i < skillList.length; i++) {
            var c = skillList[i].skill_name;
            var b = '<div class="skills">' + c + '</div>';
            a += b;
        }
        return a;
    };
    SearchFreeLancersComponent.prototype.subcatClick = function (event) {
        var _this = this;
        this.keyword = [];
        this.selectedTypeskeyword = [];
        var subcatid = this.selectedTypesubcat;
        this.postajobService.getKeywordBySubCat(subcatid)
            .subscribe(function (p) { return _this.keyword = p; }, function (e) { return console.log(e); }, function () { return _this.processdata(); });
    };
    Object.defineProperty(SearchFreeLancersComponent.prototype, "diagnostic", {
        get: function () { return JSON.stringify(this.userform.value); },
        enumerable: true,
        configurable: true
    });
    SearchFreeLancersComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'sd-searchfreelancers',
            templateUrl: 'searchfreelancers.component.html',
            styleUrls: ['searchfreelancers.component.css'],
            providers: [first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService]
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, router_1.ActivatedRoute, router_1.Router, index_1.SearchFreeLancersService, first_pipe_1.MyCurrencyPipe, mydateformat_pipe_1.MyDateFormat, emailvalidate_pipe_1.EmailValidate, baseurl_service_1.BaseUrlService, index_2.PostajobService])
    ], SearchFreeLancersComponent);
    return SearchFreeLancersComponent;
}());
exports.SearchFreeLancersComponent = SearchFreeLancersComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
