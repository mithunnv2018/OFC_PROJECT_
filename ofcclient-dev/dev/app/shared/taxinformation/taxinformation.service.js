"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var Observable_1 = require('rxjs/Observable');
var baseurl_service_1 = require('../baseurl/baseurl.service');
var TaxinformationService = (function () {
    function TaxinformationService(http, baseUrlservice) {
        this.http = http;
        this.baseUrlservice = baseUrlservice;
        this.baseUrl = 'http://localhost:8080/TaskManagerWS/rest/taskmanager/';
        this.baseUrl = baseUrlservice.getBaseurl();
    }
    TaxinformationService.prototype.get = function () {
        return this.http.get('/assets/data.json')
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
    };
    TaxinformationService.prototype.insert = function (inparam, fileUpload) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "input=" + JSON.stringify(inparam) + "&fileupload=" + JSON.stringify(fileUpload);
        var url2 = this.baseUrl + "WS_tbl_taxinformation_master_create";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    TaxinformationService.prototype.update = function (inparam, fileUpload) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "input=" + JSON.stringify(inparam) + "&fileupload=" + JSON.stringify(fileUpload);
        var url2 = this.baseUrl + "WS_tbl_taxinformation_master_update";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    TaxinformationService.prototype.getselectAllfileTaxinformation = function (pkid) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "input=" + pkid;
        var url2 = this.baseUrl + "selectAllfileuploadTaxinformation";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    TaxinformationService.prototype.getselectAllfileuploadMilestone = function (pkid) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "input=" + pkid;
        var url2 = this.baseUrl + "selectAllfileuploadMilestone";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    TaxinformationService.prototype.getedit = function (pkid) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "input=" + pkid;
        var url2 = this.baseUrl + "WS_tbl_taxinformation_master_selectedit";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    TaxinformationService.prototype.getall = function () {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "input=abc";
        var url2 = this.baseUrl + "WS_tbl_taxinformation_master_selectall";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    TaxinformationService.prototype.getHeaders = function () {
        var headers = new http_1.Headers();
        headers.append('Accept', 'application/json');
        return headers;
    };
    TaxinformationService.prototype.getHeaders2 = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/json; charset=utf-8' });
        var options = new http_1.RequestOptions({ headers: headers });
        return options;
    };
    TaxinformationService.prototype.getHeadersUrlencode = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        return options;
    };
    TaxinformationService.prototype.getHeadersUrlencodeUtf8 = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8' });
        var options = new http_1.RequestOptions({ headers: headers });
        return options;
    };
    TaxinformationService.prototype.handleError = function (error) {
        var errMsg = (error.message) ? error.message :
            error.status ? error.status + " - " + error.statusText : 'Server error';
        console.error(errMsg);
        return Observable_1.Observable.throw(errMsg);
    };
    TaxinformationService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http, baseurl_service_1.BaseUrlService])
    ], TaxinformationService);
    return TaxinformationService;
}());
exports.TaxinformationService = TaxinformationService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvdGF4aW5mb3JtYXRpb24vdGF4aW5mb3JtYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQTJCLGVBQWUsQ0FBQyxDQUFBO0FBQzNDLHFCQUF3RCxlQUFlLENBQUMsQ0FBQTtBQUN4RSwyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUk3QyxnQ0FBNkIsNEJBQTRCLENBQUMsQ0FBQTtBQVExRDtJQVVFLCtCQUFvQixJQUFXLEVBQVMsY0FBNkI7UUFBakQsU0FBSSxHQUFKLElBQUksQ0FBTztRQUFTLG1CQUFjLEdBQWQsY0FBYyxDQUFlO1FBRjdELFlBQU8sR0FBVyx1REFBdUQsQ0FBQztRQUdoRixJQUFJLENBQUMsT0FBTyxHQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBS0QsbUNBQUcsR0FBSDtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQzthQUN4QixHQUFHLENBQUMsVUFBQyxHQUFhLElBQUssT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDO2FBRWxDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUdELHNDQUFNLEdBQU4sVUFBTyxPQUF1QixFQUFDLFVBQXVCO1FBRXBELElBQUksUUFBUSxHQUFHLElBQUksY0FBTyxFQUFFLENBQUM7UUFDN0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztRQUVyRSxJQUFJLEtBQUssR0FBRyxXQUFTLElBQUksQ0FBQyxTQUFTLENBQUUsT0FBTyxDQUFDLG9CQUFlLElBQUksQ0FBQyxTQUFTLENBQUUsVUFBVSxDQUFHLENBQUM7UUFFMUYsSUFBSSxJQUFJLEdBQU0sSUFBSSxDQUFDLE9BQU8sd0NBQXFDLENBQUM7UUFFaEUsSUFBSSxZQUFZLEdBQUcsSUFB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RUFBRTs7NkJBQUE7SUE2T2IsNEJBQUM7QUFBRCxDQTVPQSxBQTRPQyxJQUFBO0FBNU9ZLDZCQUFxQix3QkE0T2pDLENBQUEiLCJmaWxlIjoiYXBwL3NoYXJlZC90YXhpbmZvcm1hdGlvbi90YXhpbmZvcm1hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwLCBSZXNwb25zZSwgSGVhZGVycywgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFRheGluZm9ybWF0aW9uIH0gZnJvbSAnLi4vLi4vdGF4aW5mb3JtYXRpb24vdGF4aW5mb3JtYXRpb24nO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkIH0gZnJvbSAnLi4vLi4vdGF4aW5mb3JtYXRpb24vZmlsZXVwbG9hZCc7XHJcblxyXG5pbXBvcnQge0Jhc2VVcmxTZXJ2aWNlfSBmcm9tICcuLi9iYXNldXJsL2Jhc2V1cmwuc2VydmljZSc7XHJcblxyXG4vLyBpbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2RvJzsgIC8vIGZvciBkZWJ1Z2dpbmdcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHRoZSBOYW1lTGlzdCBzZXJ2aWNlIHdpdGggbWV0aG9kcyB0byByZWFkIG5hbWVzIGFuZCBhZGQgbmFtZXMuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUYXhpbmZvcm1hdGlvblNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmV3IE5hbWVMaXN0U2VydmljZSB3aXRoIHRoZSBpbmplY3RlZCBIdHRwLlxyXG4gICAqIEBwYXJhbSB7SHR0cH0gaHR0cCAtIFRoZSBpbmplY3RlZCBIdHRwLlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqL1xyXG4gIC8vcHJpdmF0ZSBiYXNlVXJsOiBzdHJpbmcgPSAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL1Rhc2tNYW5hZ2VyV1MvcmVzdC9hdHVsdGVzdC8nO1xyXG4gIHByaXZhdGUgYmFzZVVybDogc3RyaW5nID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9UYXNrTWFuYWdlcldTL3Jlc3QvdGFza21hbmFnZXIvJztcclxuICBcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHAgOiBIdHRwLHByaXZhdGUgYmFzZVVybHNlcnZpY2U6QmFzZVVybFNlcnZpY2Upe1xyXG4gICAgdGhpcy5iYXNlVXJsPWJhc2VVcmxzZXJ2aWNlLmdldEJhc2V1cmwoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIGZvciB0aGUgSFRUUCBHRVQgcmVxdWVzdCBmb3IgdGhlIEpTT04gcmVzb3VyY2UuXHJcbiAgICogQHJldHVybiB7c3RyaW5nW119IFRoZSBPYnNlcnZhYmxlIGZvciB0aGUgSFRUUCByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIGdldCgpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCgnL2Fzc2V0cy9kYXRhLmpzb24nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHJlczogUmVzcG9uc2UpID0+IHJlcy5qc29uKCkpXHJcbiAgICAvLyAgICAgICAgICAgICAgLmRvKGRhdGEgPT4gY29uc29sZS5sb2coJ3NlcnZlciBkYXRhOicsIGRhdGEpKSAgLy8gZGVidWdcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgfVxyXG5cclxuXHJcbiAgaW5zZXJ0KGlucGFyYW06IFRheGluZm9ybWF0aW9uLGZpbGVVcGxvYWQ6RmlsZVVwbG9hZFtdKTogT2JzZXJ2YWJsZTxUYXhpbmZvcm1hdGlvbltdPntcclxuICAgIC8vSGVhZGVyIGRlY2xhcmF0aW9uXHJcbiAgICBsZXQgaGVhZGVyczEgPSBuZXcgSGVhZGVycygpO1xyXG4gICAgaGVhZGVyczEuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XHJcbiAgICAvL0JvZHkgcGFyYW1zXHJcbiAgICB2YXIgYm9keTEgPSBgaW5wdXQ9JHtKU09OLnN0cmluZ2lmeSggaW5wYXJhbSl9JmZpbGV1cGxvYWQ9JHtKU09OLnN0cmluZ2lmeSggZmlsZVVwbG9hZCl9YDtcclxuICAgIC8vIFVSTCBkZWNsYXJhdGlvblxyXG4gICAgdmFyIHVybDIgPSBgJHt0aGlzLmJhc2VVcmx9V1NfdGJsX3RheGluZm9ybWF0aW9uX21hc3Rlcl9jcmVhdGVgOy8vaW5zZXJ0TWlsZXN0b25lc1RheGluZm9ybWF0aW9uYDtcclxuICAgIFxyXG4gICAgbGV0IGNvbXBsYWludHMxJCA9IHRoaXMuaHR0cFxyXG4gICAgICAucG9zdCh1cmwyICwgYm9keTEgLHtoZWFkZXJzOiBoZWFkZXJzMX0pIC8vIFBvc3QgVVJMIGFuZCBoZWFkZXJcclxuICAgICAgLm1hcCgocmVzOlJlc3BvbnNlKSA9PiByZXMuanNvbigpKSAvLyBNYXBwaW5nIHJlc3BvbnNlIHRvIHJldHVybiB2YXJpYWJsZVxyXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7IC8vIEVycm9yIGhhbmRsZXJcclxuICAgICAgLy9hbGVydChcImdldERpc3BsYXlBbGwyIGFmdGVyXCIpO1xyXG4gICAgICByZXR1cm4gY29tcGxhaW50czEkOyBcclxuICB9XHJcblxyXG4gIC8vIFVwZGF0ZSBvbGQgZW50cnlcclxuICB1cGRhdGUoaW5wYXJhbTogVGF4aW5mb3JtYXRpb24sZmlsZVVwbG9hZDpGaWxlVXBsb2FkW10pOiBPYnNlcnZhYmxlPFRheGluZm9ybWF0aW9uW10+e1xyXG4gICAgXHJcbiAgICAgLy9IZWFkZXIgZGVjbGFyYXRpb25cclxuICAgIGxldCBoZWFkZXJzMSA9IG5ldyBIZWFkZXJzKCk7XHJcbiAgICBoZWFkZXJzMS5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcclxuICAgIC8vQm9keSBwYXJhbXNcclxuICAgIHZhciBib2R5MSA9IGBpbnB1dD0ke0pTT04uc3RyaW5naWZ5KCBpbnBhcmFtKX0mZmlsZXVwbG9hZD0ke0pTT04uc3RyaW5naWZ5KCBmaWxlVXBsb2FkKX1gO1xyXG4gICAgLy8gVVJMIGRlY2xhcmF0aW9uXHJcbiAgICB2YXIgdXJsMiA9IGAke3RoaXMuYmFzZVVybH1XU190YmxfdGF4aW5mb3JtYXRpb25fbWFzdGVyX3VwZGF0ZWA7Ly9pbnNlcnRNaWxlc3RvbmVzVGF4aW5mb3JtYXRpb25gO1xyXG4gICAgXHJcbiAgICAvL0NhbGwgV1NcclxuICAgIGxldCBjb21wbGFpbnRzMSQgPSB0aGlzLmh0dHBcclxuICAgICAgLnBvc3QodXJsMiAsIGJvZHkxICx7aGVhZGVyczogaGVhZGVyczF9KSAvLyBQb3N0IFVSTCBhbmQgaGVhZGVyXHJcbiAgICAgIC5tYXAoKHJlczpSZXNwb25zZSkgPT4gcmVzLmpzb24oKSkgLy8gTWFwcGluZyByZXNwb25zZSB0byByZXR1cm4gdmFyaWFibGVcclxuICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpOyAvLyBFcnJvciBoYW5kbGVyXHJcbiAgICAgIC8vYWxlcnQoXCJnZXREaXNwbGF5QWxsMiBhZnRlclwiKTtcclxuICAgICAgcmV0dXJuIGNvbXBsYWludHMxJDsgXHJcbiAgfVxyXG5cclxuLy8gb24gRWRpdCBnZXQgZmlsZXMgdXBsb2FkXHJcbiAgZ2V0c2VsZWN0QWxsZmlsZVRheGluZm9ybWF0aW9uKHBraWQ6IHN0cmluZyk6IE9ic2VydmFibGU8RmlsZVVwbG9hZFtdPntcclxuICAgIFxyXG4gICAgbGV0IGhlYWRlcnMxID0gbmV3IEhlYWRlcnMoKTtcclxuICAgIGhlYWRlcnMxLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gICAgXHJcbiAgICB2YXIgYm9keTEgPSBgaW5wdXQ9JHsgcGtpZH1gO1xyXG4gICAgXHJcbiAgICB2YXIgdXJsMiA9IGAke3RoaXMuYmFzZVVybH1zZWxlY3RBbGxmaWxldXBsb2FkVGF4aW5mb3JtYXRpb25gO1xyXG4gICAgXHJcbiAgICBsZXQgY29tcGxhaW50czEkID0gdGhpcy5odHRwXHJcbiAgICAgIC5wb3N0KHVybDIgLCBib2R5MSAse2hlYWRlcnM6IGhlYWRlcnMxfSlcclxuICAgICAgLm1hcCgocmVzOlJlc3BvbnNlKSA9PiByZXMuanNvbigpKVxyXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgICAgIC8vYWxlcnQoXCJnZXREaXNwbGF5QWxsMiBhZnRlclwiKTtcclxuICAgICAgcmV0dXJuIGNvbXBsYWludHMxJDsgXHJcbiAgfVxyXG4gIFxyXG5cclxuICAvLyBvbiBFZGl0IGdldCBmaWxlcyB1cGxvYWRcclxuICBnZXRzZWxlY3RBbGxmaWxldXBsb2FkTWlsZXN0b25lKHBraWQ6IHN0cmluZyk6IE9ic2VydmFibGU8RmlsZVVwbG9hZFtdPntcclxuICAgIFxyXG4gICAgbGV0IGhlYWRlcnMxID0gbmV3IEhlYWRlcnMoKTtcclxuICAgIGhlYWRlcnMxLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gICAgXHJcbiAgICB2YXIgYm9keTEgPSBgaW5wdXQ9JHsgcGtpZH1gO1xyXG4gICAgXHJcbiAgICB2YXIgdXJsMiA9IGAke3RoaXMuYmFzZVVybH1zZWxlY3RBbGxmaWxldXBsb2FkTWlsZXN0b25lYDtcclxuICAgIFxyXG4gICAgbGV0IGNvbXBsYWludHMxJCA9IHRoaXMuaHR0cFxyXG4gICAgICAucG9zdCh1cmwyICwgYm9keTEgLHtoZWFkZXJzOiBoZWFkZXJzMX0pXHJcbiAgICAgIC5tYXAoKHJlczpSZXNwb25zZSkgPT4gcmVzLmpzb24oKSlcclxuICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gICAgICAvL2FsZXJ0KFwiZ2V0RGlzcGxheUFsbDIgYWZ0ZXJcIik7XHJcbiAgICAgIHJldHVybiBjb21wbGFpbnRzMSQ7IFxyXG4gIH1cclxuXHJcbiAgLy8gT24gRWRpdCBnZXQgZGF0YVxyXG4gIGdldGVkaXQocGtpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxUYXhpbmZvcm1hdGlvbj57XHJcbiAgIFxyXG4gICAgbGV0IGhlYWRlcnMxID0gbmV3IEhlYWRlcnMoKTtcclxuICAgIGhlYWRlcnMxLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gICBcclxuICAgIHZhciBib2R5MSA9IGBpbnB1dD0keyBwa2lkfWA7XHJcbiAgIFxyXG4gICAgdmFyIHVybDIgPSBgJHt0aGlzLmJhc2VVcmx9V1NfdGJsX3RheGluZm9ybWF0aW9uX21hc3Rlcl9zZWxlY3RlZGl0YDsvL3NlbGVjdEVkaXRNaWxlc3RvbmVgO1xyXG4gICAgXHJcbiAgICBsZXQgY29tcGxhaW50czEkID0gdGhpcy5odHRwXHJcbiAgICAgIC5wb3N0KHVybDIgLCBib2R5MSAse2hlYWRlcnM6IGhlYWRlcnMxfSlcclxuICAgICAgLm1hcCgocmVzOlJlc3BvbnNlKSA9PiByZXMuanNvbigpKVxyXG4gICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgICAgIC8vYWxlcnQoXCJnZXREaXNwbGF5QWxsMiBhZnRlclwiKTtcclxuICAgICAgcmV0dXJuIGNvbXBsYWludHMxJDsgXHJcbiAgfVxyXG5cclxuICAvLyBnZXQgYWxsIGZvciBHcmlkXHJcbiAgZ2V0YWxsKCk6IE9ic2VydmFibGU8VGF4aW5mb3JtYXRpb25bXT57XHJcbiAgICBcclxuICAgIGxldCBoZWFkZXJzMSA9IG5ldyBIZWFkZXJzKCk7XHJcbiAgICBoZWFkZXJzMS5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcclxuICAgIFxyXG4gICAgdmFyIGJvZHkxID0gYGlucHV0PWFiY2A7XHJcbiAgICBcclxuICAgIHZhciB1cmwyID0gYCR7dGhpcy5iYXNlVXJsfVdTX3RibF90YXhpbmZvcm1hdGlvbl9tYXN0ZXJfc2VsZWN0YWxsYDsvL3NlbGVjdEFsbE1pbGVzdG9uZWA7XHJcbiAgICBcclxuICAgIGxldCBjb21wbGFpbnRzMSQgPSB0aGlzLmh0dHBcclxuICAgICAgLnBvc3QodXJsMiAsIGJvZHkxICx7aGVhZGVyczogaGVhZGVyczF9KVxyXG4gICAgICAubWFwKChyZXM6UmVzcG9uc2UpID0+IHJlcy5qc29uKCkpXHJcbiAgICAgIC5jYXRjaCh0aGlzLmhhbmRsZUVycm9yKTtcclxuICAgICAgLy9hbGVydChcImdldERpc3BsYXlBbGwyIGFmdGVyXCIpO1xyXG4gICAgICByZXR1cm4gY29tcGxhaW50czEkOyBcclxuICB9XHJcblxyXG4gIC8vIHN1Ym1pdFVwbG9hZEFuZE90aGVycyh1cGxvYWRlZEZpbGVzOiBhbnlbXSk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gIC8vICAgbGV0IGhlYWRlcnMxID0gbmV3IEhlYWRlcnMoKTtcclxuICAvLyAgIGhlYWRlcnMxLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gIC8vICAgdmFyIGJvZHkxID0gYGZpbGV1cGxvYWRhcnJheT0ke0pTT04uc3RyaW5naWZ5KCB1cGxvYWRlZEZpbGVzKX1gO1xyXG4gIC8vICAgYWxlcnQoXCJib2R5XCIgKyBKU09OLnN0cmluZ2lmeSh1cGxvYWRlZEZpbGVzKSlcclxuICAvLyAgIHZhciB1cmwyID0gYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9UYXNrTWFuYWdlcldTL3Jlc3QvYXR1bHRlc3Qvc3VibWl0ZmlsZXVwbG9hZGA7XHJcbiAgICBcclxuXHJcbiAgLy8gICAvL3R5cGUgTXlUeXBlPXtpc3N1Y2Nlc3M6c3RyaW5nfTtcclxuXHJcbiAgLy8gICBsZXQgbXlyZXN1bHQ9dGhpcy5odHRwXHJcbiAgLy8gICAgIC5wb3N0KHVybDIsYm9keTEgICx7aGVhZGVyczogaGVhZGVyczF9KVxyXG4gIC8vICAgICAubWFwKChyZXM6UmVzcG9uc2UpID0+IHJlcy5qc29uKCkpXHJcbiAgLy8gICAgIC5jYXRjaCh0aGlzLmhhbmRsZUVycm9yKTtcclxuICAvLyAgIC8vIGFsZXJ0KFwiaGhcIitteXJlc3VsdC5pc3N1Y2Nlc3MpOyAgXHJcbiAgLy8gICBjb25zb2xlLmxvZyhcIk1pdGg6XCIsbXlyZXN1bHQpO1xyXG4gIC8vICAgY29uc29sZS5sb2coXCJtaXRoMjpcIix1cGxvYWRlZEZpbGVzKTtcclxuICAvLyAgIHJldHVybiBteXJlc3VsdDsgIFxyXG4gIC8vIH1cclxuXHJcbiAgXHJcblxyXG4gIC8vIGdldERpc3BsYXlBbGwyKCk6IE9ic2VydmFibGU8TWlsZXN0b25lW10+e1xyXG4gIC8vICAgLy9hbGVydChcImdldERpc3BsYXlBbGwyIGJlZm9yZVwiKTtcclxuICAvLyAgIC8vIGxldCBjb21wbGFpbnRzMSQgPSB0aGlzLmh0dHBcclxuICAvLyAgIC8vICAgLnBvc3QoYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9BdHVsdGVzdC9yZXN0L2F0dWx0ZXN0L3NlbGVjdHRlc3RvbmU/ZW5yb2xsbm89ZXJgLCB7aGVhZGVyczogdGhpcy5nZXRIZWFkZXJzMigpfSlcclxuICAvLyAgIC8vICAgLm1hcCgocmVzOlJlc3BvbnNlKSA9PiByZXMuanNvbigpKVxyXG4gIC8vICAgLy8gICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgLy8gICAvLyAgIC8vYWxlcnQoXCJnZXREaXNwbGF5QWxsMiBhZnRlclwiKTtcclxuICAvLyAgIC8vICAgcmV0dXJuIGNvbXBsYWludHMxJDsgXHJcblxyXG4gIC8vICAgbGV0IGhlYWRlcnMxID0gbmV3IEhlYWRlcnMoKTtcclxuICAvLyAgIGhlYWRlcnMxLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gIC8vICAgLy9oZWFkZXJzMS5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyApO1xyXG4gIC8vICAgLy9oZWFkZXJzMS5hcHBlbmQoJ2lucHV0JywgSlNPTi5zdHJpbmdpZnkoIGlucGFyYW0pKTtcclxuICAvLyAgIC8vdmFyIGJvZHkxID0gYGlucHV0PSR7SlNPTi5zdHJpbmdpZnkoIGlucGFyYW0pfWA7XHJcbiAgLy8gICAvL2NvbnNvbGUubG9nKGJvZHkxKTtcclxuICAvLyAgIC8vdmFyIHVybDIgPSBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL0F0dWx0ZXN0L3Jlc3QvYXR1bHRlc3QvaW5zZXJ0VGVzdG9uZT9gICsgYm9keTE7XHJcbiAgLy8gICB2YXIgdXJsMiA9IGBodHRwOi8vbG9jYWxob3N0OjgwODAvVGFza01hbmFnZXJXUy9yZXN0L2F0dWx0ZXN0L2RycHRheGluZm9ybWF0aW9uYDtcclxuICAvLyAgIGNvbnNvbGUubG9nKHVybDIpO1xyXG4gIC8vICAgbGV0IGNvbXBsYWludHMxJCA9IHRoaXMuaHR0cFxyXG4gIC8vICAgICAucG9zdCh1cmwyICAse2hlYWRlcnM6IGhlYWRlcnMxfSlcclxuICAvLyAgICAgLm1hcCgocmVzOlJlc3BvbnNlKSA9PiByZXMuanNvbigpKVxyXG4gIC8vICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgLy8gICAgIC8vYWxlcnQoXCJnZXREaXNwbGF5QWxsMiBhZnRlclwiKTtcclxuICAvLyAgICAgcmV0dXJuIGNvbXBsYWludHMxJDsgXHJcblxyXG4gIC8vIH1cclxuIFxyXG4gIC8vIHBvcHVwbGF0ZSBkcm9wZG93blxyXG4gIC8vIGdldHRheGluZm9ybWF0aW9uZHJwKCk6IE9ic2VydmFibGU8RHJvcGRvd24xW10+e1xyXG4gICBcclxuICAvLyAgIGxldCBoZWFkZXJzMSA9IG5ldyBIZWFkZXJzKCk7XHJcbiAgLy8gICBoZWFkZXJzMS5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcclxuICAgXHJcbiAgLy8gICB2YXIgYm9keTEgPSBgaW5wdXQ9bWA7XHJcbiAgXHJcbiAgLy8gICB2YXIgdXJsMiA9IGAke3RoaXMuYmFzZVVybH1kcnB0YXhpbmZvcm1hdGlvbmA7XHJcbiAgIFxyXG4gIC8vICAgbGV0IGNvbXBsYWludHMxJCA9IHRoaXMuaHR0cFxyXG4gIC8vICAgICAucG9zdCh1cmwyICxib2R5MSAse2hlYWRlcnM6IGhlYWRlcnMxfSlcclxuICAvLyAgICAgLm1hcCgocmVzOlJlc3BvbnNlKSA9PiByZXMuanNvbigpKVxyXG4gIC8vICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgICAgIFxyXG4gICAgICBcclxuICAvLyAgICAgcmV0dXJuIGNvbXBsYWludHMxJDsgXHJcblxyXG4gIC8vIH1cclxuXHJcbiAgIHByaXZhdGUgZ2V0SGVhZGVycygpe1xyXG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xyXG4gICAgaGVhZGVycy5hcHBlbmQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICByZXR1cm4gaGVhZGVycztcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRIZWFkZXJzMigpe1xyXG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcgfSk7ICBcclxuICAgIGxldCBvcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHsgaGVhZGVyczogaGVhZGVycyB9KTtcclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH1cclxuICBwcml2YXRlIGdldEhlYWRlcnNVcmxlbmNvZGUoKXtcclxuICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSk7ICBcclxuICAgIGxldCBvcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHsgaGVhZGVyczogaGVhZGVycyB9KTtcclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH1cclxuICBwcml2YXRlIGdldEhlYWRlcnNVcmxlbmNvZGVVdGY4KCl7XHJcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9dXRmLTgnIH0pOyAgXHJcbiAgICBsZXQgb3B0aW9ucyA9IG5ldyBSZXF1ZXN0T3B0aW9ucyh7IGhlYWRlcnM6IGhlYWRlcnMgfSk7XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBIYW5kbGUgSFRUUCBlcnJvclxyXG4gICAgKi9cclxuICBwcml2YXRlIGhhbmRsZUVycm9yIChlcnJvcjogYW55KSB7XHJcbiAgICAvLyBJbiBhIHJlYWwgd29ybGQgYXBwLCB3ZSBtaWdodCB1c2UgYSByZW1vdGUgbG9nZ2luZyBpbmZyYXN0cnVjdHVyZVxyXG4gICAgLy8gV2UnZCBhbHNvIGRpZyBkZWVwZXIgaW50byB0aGUgZXJyb3IgdG8gZ2V0IGEgYmV0dGVyIG1lc3NhZ2VcclxuICAgIGxldCBlcnJNc2cgPSAoZXJyb3IubWVzc2FnZSkgPyBlcnJvci5tZXNzYWdlIDpcclxuICAgICAgZXJyb3Iuc3RhdHVzID8gYCR7ZXJyb3Iuc3RhdHVzfSAtICR7ZXJyb3Iuc3RhdHVzVGV4dH1gIDogJ1NlcnZlciBlcnJvcic7XHJcbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7IC8vIGxvZyB0byBjb25zb2xlIGluc3RlYWRcclxuICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVyck1zZyk7XHJcbiAgfVxyXG59XHJcblxyXG4iXX0=
