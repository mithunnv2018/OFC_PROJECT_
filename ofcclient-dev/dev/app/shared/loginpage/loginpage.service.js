"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/operator/do');
var baseurl_service_1 = require('../baseurl/baseurl.service');
require('rxjs/add/operator/map');
var Subject_1 = require('rxjs/Subject');
var LoginPageService = (function () {
    function LoginPageService(http, baseurlservice) {
        this.http = http;
        this.baseurlservice = baseurlservice;
        this.baseUrl = 'http://localhost:8080/OFCAdmin/rest/';
        this.missionAnnouncedSource = new Subject_1.Subject();
        this.missionAnnounced$ = this.missionAnnouncedSource.asObservable();
        this.baseUrl = baseurlservice.getBaseurl() + 'loginclient/';
    }
    LoginPageService.prototype.announceMission = function (mission) {
        this.missionAnnouncedSource.next(mission);
    };
    LoginPageService.prototype.isloggedin = function () {
        if (sessionStorage.getItem('memberdetails')) {
            return true;
        }
        else {
            return false;
        }
    };
    LoginPageService.prototype.getUserDetails = function () {
        if (sessionStorage.getItem('memberdetails')) {
            var data = sessionStorage.getItem('memberdetails');
            var obj = JSON.parse(data);
            var sessionid = obj.ofcmemsession_id;
            var data2 = sessionStorage.getItem(sessionid);
            var obj2 = JSON.parse(data2);
            return obj2.ofcmembers_fname;
        }
        return "empty";
    };
    LoginPageService.prototype.logout = function () {
        sessionStorage.removeItem('memberdetails');
    };
    LoginPageService.prototype.get = function () {
        return this.http.get('/assets/data.json')
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
    };
    LoginPageService.prototype.getLoginClient = function (username, password) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "username=" + username + "&password=" + password;
        var url2 = this.baseUrl + "WS_proc_ofcmember_login";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    LoginPageService.prototype.getViewOfcMember = function (input0) {
        var headers1 = new http_1.Headers();
        headers1.append('Content-Type', 'application/x-www-form-urlencoded');
        var body1 = "membersessionid=" + input0;
        var url2 = this.baseUrl + "WS_proc_tbl_ofcmembers_master_selectjson";
        var complaints1$ = this.http
            .post(url2, body1, { headers: headers1 })
            .map(function (res) { return res.json(); })
            .catch(this.handleError);
        return complaints1$;
    };
    LoginPageService.prototype.getHeaders = function () {
        var headers = new http_1.Headers();
        headers.append('Accept', 'application/json');
        return headers;
    };
    LoginPageService.prototype.getHeaders2 = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/json; charset=utf-8' });
        var options = new http_1.RequestOptions({ headers: headers });
        return options;
    };
    LoginPageService.prototype.getHeadersUrlencode = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        return options;
    };
    LoginPageService.prototype.getHeadersUrlencodeUtf8 = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8' });
        var options = new http_1.RequestOptions({ headers: headers });
        return options;
    };
    LoginPageService.prototype.handleError = function (error) {
        var errMsg = (error.message) ? error.message :
            error.status ? error.status + " - " + error.statusText : 'Server error';
        console.error(errMsg);
        return Observable_1.Observable.throw(errMsg);
    };
    LoginPageService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http, baseurl_service_1.BaseUrlService])
    ], LoginPageService);
    return LoginPageService;
}());
exports.LoginPageService = LoginPageService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
